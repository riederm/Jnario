/*
 * generated by Xtext
 */
package org.jnario.feature.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.jnario.xbase.richstring.services.XbaseWithRichstringGrammarAccess;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class FeatureGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FeatureFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.FeatureFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPackageAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPackageQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cPackageAssignment_1_1.eContents().get(0);
		private final Assignment cImportSectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_2_0 = (RuleCall)cImportSectionAssignment_2.eContents().get(0);
		private final Assignment cXtendTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXtendTypesFeatureParserRuleCall_3_0 = (RuleCall)cXtendTypesAssignment_3.eContents().get(0);
		
		//FeatureFile JnarioFile:
		//	{FeatureFile} ('package' package=QualifiedName)? importSection=XImportSection? xtendTypes+=Feature?
		@Override public ParserRule getRule() { return rule; }

		//{FeatureFile} ('package' package=QualifiedName)? importSection=XImportSection? xtendTypes+=Feature?
		public Group getGroup() { return cGroup; }

		//{FeatureFile}
		public Action getFeatureFileAction_0() { return cFeatureFileAction_0; }

		//('package' package=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }

		//'package'
		public Keyword getPackageKeyword_1_0() { return cPackageKeyword_1_0; }

		//package=QualifiedName
		public Assignment getPackageAssignment_1_1() { return cPackageAssignment_1_1; }

		//QualifiedName
		public RuleCall getPackageQualifiedNameParserRuleCall_1_1_0() { return cPackageQualifiedNameParserRuleCall_1_1_0; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_2() { return cImportSectionAssignment_2; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_2_0() { return cImportSectionXImportSectionParserRuleCall_2_0; }

		//xtendTypes+=Feature?
		public Assignment getXtendTypesAssignment_3() { return cXtendTypesAssignment_3; }

		//Feature
		public RuleCall getXtendTypesFeatureParserRuleCall_3_0() { return cXtendTypesFeatureParserRuleCall_3_0; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFEATURE_TEXTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionTEXTTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersBackgroundParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersScenarioParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		
		//Feature JnarioClass:
		//	{Feature} annotations+=XAnnotation* name=FEATURE_TEXT description=TEXT? members+=Background? members+=Scenario*
		@Override public ParserRule getRule() { return rule; }

		//{Feature} annotations+=XAnnotation* name=FEATURE_TEXT description=TEXT? members+=Background? members+=Scenario*
		public Group getGroup() { return cGroup; }

		//{Feature}
		public Action getFeatureAction_0() { return cFeatureAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//name=FEATURE_TEXT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//FEATURE_TEXT
		public RuleCall getNameFEATURE_TEXTTerminalRuleCall_2_0() { return cNameFEATURE_TEXTTerminalRuleCall_2_0; }

		//description=TEXT?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//TEXT
		public RuleCall getDescriptionTEXTTerminalRuleCall_3_0() { return cDescriptionTEXTTerminalRuleCall_3_0; }

		//members+=Background?
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//Background
		public RuleCall getMembersBackgroundParserRuleCall_4_0() { return cMembersBackgroundParserRuleCall_4_0; }

		//members+=Scenario*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }

		//Scenario
		public RuleCall getMembersScenarioParserRuleCall_5_0() { return cMembersScenarioParserRuleCall_5_0; }
	}

	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBackgroundAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameBACKGROUND_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMembersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMembersMemberParserRuleCall_2_0 = (RuleCall)cMembersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cMembersAlternatives_3_0_0 = (Alternatives)cMembersAssignment_3_0.eContents().get(0);
		private final RuleCall cMembersGivenParserRuleCall_3_0_0_0 = (RuleCall)cMembersAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cMembersGivenReferenceParserRuleCall_3_0_0_1 = (RuleCall)cMembersAlternatives_3_0_0.eContents().get(1);
		private final Assignment cMembersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cMembersAlternatives_3_1_0 = (Alternatives)cMembersAssignment_3_1.eContents().get(0);
		private final RuleCall cMembersAndParserRuleCall_3_1_0_0 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cMembersAndReferenceParserRuleCall_3_1_0_1 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cMembersButParserRuleCall_3_1_0_2 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(2);
		private final RuleCall cMembersButReferenceParserRuleCall_3_1_0_3 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(3);
		
		//Background:
		//	{Background} name=BACKGROUND_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And | AndReference |
		//	But | ButReference)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{Background} name=BACKGROUND_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And | AndReference | But
		//| ButReference)*)?
		public Group getGroup() { return cGroup; }

		//{Background}
		public Action getBackgroundAction_0() { return cBackgroundAction_0; }

		//name=BACKGROUND_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//BACKGROUND_TEXT
		public RuleCall getNameBACKGROUND_TEXTTerminalRuleCall_1_0() { return cNameBACKGROUND_TEXTTerminalRuleCall_1_0; }

		//members+=Member*
		public Assignment getMembersAssignment_2() { return cMembersAssignment_2; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_0() { return cMembersMemberParserRuleCall_2_0; }

		//(members+=(Given | GivenReference) members+=(And | AndReference | But | ButReference)*)?
		public Group getGroup_3() { return cGroup_3; }

		//members+=(Given | GivenReference)
		public Assignment getMembersAssignment_3_0() { return cMembersAssignment_3_0; }

		//(Given | GivenReference)
		public Alternatives getMembersAlternatives_3_0_0() { return cMembersAlternatives_3_0_0; }

		//Given
		public RuleCall getMembersGivenParserRuleCall_3_0_0_0() { return cMembersGivenParserRuleCall_3_0_0_0; }

		//GivenReference
		public RuleCall getMembersGivenReferenceParserRuleCall_3_0_0_1() { return cMembersGivenReferenceParserRuleCall_3_0_0_1; }

		//members+=(And | AndReference | But | ButReference)*
		public Assignment getMembersAssignment_3_1() { return cMembersAssignment_3_1; }

		//(And | AndReference | But | ButReference)
		public Alternatives getMembersAlternatives_3_1_0() { return cMembersAlternatives_3_1_0; }

		//And
		public RuleCall getMembersAndParserRuleCall_3_1_0_0() { return cMembersAndParserRuleCall_3_1_0_0; }

		//AndReference
		public RuleCall getMembersAndReferenceParserRuleCall_3_1_0_1() { return cMembersAndReferenceParserRuleCall_3_1_0_1; }

		//But
		public RuleCall getMembersButParserRuleCall_3_1_0_2() { return cMembersButParserRuleCall_3_1_0_2; }

		//ButReference
		public RuleCall getMembersButReferenceParserRuleCall_3_1_0_3() { return cMembersButReferenceParserRuleCall_3_1_0_3; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScenarioAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSCENARIO_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMembersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMembersMemberParserRuleCall_2_0 = (RuleCall)cMembersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cMembersAlternatives_3_0_0 = (Alternatives)cMembersAssignment_3_0.eContents().get(0);
		private final RuleCall cMembersGivenParserRuleCall_3_0_0_0 = (RuleCall)cMembersAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cMembersGivenReferenceParserRuleCall_3_0_0_1 = (RuleCall)cMembersAlternatives_3_0_0.eContents().get(1);
		private final Assignment cMembersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cMembersAlternatives_3_1_0 = (Alternatives)cMembersAssignment_3_1.eContents().get(0);
		private final RuleCall cMembersAndParserRuleCall_3_1_0_0 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cMembersAndReferenceParserRuleCall_3_1_0_1 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cMembersButParserRuleCall_3_1_0_2 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(2);
		private final RuleCall cMembersButReferenceParserRuleCall_3_1_0_3 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cMembersAlternatives_4_0_0 = (Alternatives)cMembersAssignment_4_0.eContents().get(0);
		private final RuleCall cMembersWhenParserRuleCall_4_0_0_0 = (RuleCall)cMembersAlternatives_4_0_0.eContents().get(0);
		private final RuleCall cMembersWhenReferenceParserRuleCall_4_0_0_1 = (RuleCall)cMembersAlternatives_4_0_0.eContents().get(1);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cMembersAlternatives_4_1_0 = (Alternatives)cMembersAssignment_4_1.eContents().get(0);
		private final RuleCall cMembersAndParserRuleCall_4_1_0_0 = (RuleCall)cMembersAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cMembersAndReferenceParserRuleCall_4_1_0_1 = (RuleCall)cMembersAlternatives_4_1_0.eContents().get(1);
		private final RuleCall cMembersButParserRuleCall_4_1_0_2 = (RuleCall)cMembersAlternatives_4_1_0.eContents().get(2);
		private final RuleCall cMembersButReferenceParserRuleCall_4_1_0_3 = (RuleCall)cMembersAlternatives_4_1_0.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Alternatives cMembersAlternatives_5_0_0 = (Alternatives)cMembersAssignment_5_0.eContents().get(0);
		private final RuleCall cMembersThenParserRuleCall_5_0_0_0 = (RuleCall)cMembersAlternatives_5_0_0.eContents().get(0);
		private final RuleCall cMembersThenReferenceParserRuleCall_5_0_0_1 = (RuleCall)cMembersAlternatives_5_0_0.eContents().get(1);
		private final Assignment cMembersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cMembersAlternatives_5_1_0 = (Alternatives)cMembersAssignment_5_1.eContents().get(0);
		private final RuleCall cMembersAndParserRuleCall_5_1_0_0 = (RuleCall)cMembersAlternatives_5_1_0.eContents().get(0);
		private final RuleCall cMembersAndReferenceParserRuleCall_5_1_0_1 = (RuleCall)cMembersAlternatives_5_1_0.eContents().get(1);
		private final RuleCall cMembersButParserRuleCall_5_1_0_2 = (RuleCall)cMembersAlternatives_5_1_0.eContents().get(2);
		private final RuleCall cMembersButReferenceParserRuleCall_5_1_0_3 = (RuleCall)cMembersAlternatives_5_1_0.eContents().get(3);
		
		//Scenario:
		//	{Scenario} name=SCENARIO_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And | AndReference | But
		//	| ButReference)*)? (members+=(When | WhenReference) members+=(And | AndReference | But | ButReference)*)?
		//	(members+=(Then | ThenReference) members+=(And | AndReference | But | ButReference)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{Scenario} name=SCENARIO_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And | AndReference | But |
		//ButReference)*)? (members+=(When | WhenReference) members+=(And | AndReference | But | ButReference)*)?
		//(members+=(Then | ThenReference) members+=(And | AndReference | But | ButReference)*)?
		public Group getGroup() { return cGroup; }

		//{Scenario}
		public Action getScenarioAction_0() { return cScenarioAction_0; }

		//name=SCENARIO_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//SCENARIO_TEXT
		public RuleCall getNameSCENARIO_TEXTTerminalRuleCall_1_0() { return cNameSCENARIO_TEXTTerminalRuleCall_1_0; }

		//members+=Member*
		public Assignment getMembersAssignment_2() { return cMembersAssignment_2; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_0() { return cMembersMemberParserRuleCall_2_0; }

		//(members+=(Given | GivenReference) members+=(And | AndReference | But | ButReference)*)?
		public Group getGroup_3() { return cGroup_3; }

		//members+=(Given | GivenReference)
		public Assignment getMembersAssignment_3_0() { return cMembersAssignment_3_0; }

		//(Given | GivenReference)
		public Alternatives getMembersAlternatives_3_0_0() { return cMembersAlternatives_3_0_0; }

		//Given
		public RuleCall getMembersGivenParserRuleCall_3_0_0_0() { return cMembersGivenParserRuleCall_3_0_0_0; }

		//GivenReference
		public RuleCall getMembersGivenReferenceParserRuleCall_3_0_0_1() { return cMembersGivenReferenceParserRuleCall_3_0_0_1; }

		//members+=(And | AndReference | But | ButReference)*
		public Assignment getMembersAssignment_3_1() { return cMembersAssignment_3_1; }

		//(And | AndReference | But | ButReference)
		public Alternatives getMembersAlternatives_3_1_0() { return cMembersAlternatives_3_1_0; }

		//And
		public RuleCall getMembersAndParserRuleCall_3_1_0_0() { return cMembersAndParserRuleCall_3_1_0_0; }

		//AndReference
		public RuleCall getMembersAndReferenceParserRuleCall_3_1_0_1() { return cMembersAndReferenceParserRuleCall_3_1_0_1; }

		//But
		public RuleCall getMembersButParserRuleCall_3_1_0_2() { return cMembersButParserRuleCall_3_1_0_2; }

		//ButReference
		public RuleCall getMembersButReferenceParserRuleCall_3_1_0_3() { return cMembersButReferenceParserRuleCall_3_1_0_3; }

		//(members+=(When | WhenReference) members+=(And | AndReference | But | ButReference)*)?
		public Group getGroup_4() { return cGroup_4; }

		//members+=(When | WhenReference)
		public Assignment getMembersAssignment_4_0() { return cMembersAssignment_4_0; }

		//(When | WhenReference)
		public Alternatives getMembersAlternatives_4_0_0() { return cMembersAlternatives_4_0_0; }

		//When
		public RuleCall getMembersWhenParserRuleCall_4_0_0_0() { return cMembersWhenParserRuleCall_4_0_0_0; }

		//WhenReference
		public RuleCall getMembersWhenReferenceParserRuleCall_4_0_0_1() { return cMembersWhenReferenceParserRuleCall_4_0_0_1; }

		//members+=(And | AndReference | But | ButReference)*
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }

		//(And | AndReference | But | ButReference)
		public Alternatives getMembersAlternatives_4_1_0() { return cMembersAlternatives_4_1_0; }

		//And
		public RuleCall getMembersAndParserRuleCall_4_1_0_0() { return cMembersAndParserRuleCall_4_1_0_0; }

		//AndReference
		public RuleCall getMembersAndReferenceParserRuleCall_4_1_0_1() { return cMembersAndReferenceParserRuleCall_4_1_0_1; }

		//But
		public RuleCall getMembersButParserRuleCall_4_1_0_2() { return cMembersButParserRuleCall_4_1_0_2; }

		//ButReference
		public RuleCall getMembersButReferenceParserRuleCall_4_1_0_3() { return cMembersButReferenceParserRuleCall_4_1_0_3; }

		//(members+=(Then | ThenReference) members+=(And | AndReference | But | ButReference)*)?
		public Group getGroup_5() { return cGroup_5; }

		//members+=(Then | ThenReference)
		public Assignment getMembersAssignment_5_0() { return cMembersAssignment_5_0; }

		//(Then | ThenReference)
		public Alternatives getMembersAlternatives_5_0_0() { return cMembersAlternatives_5_0_0; }

		//Then
		public RuleCall getMembersThenParserRuleCall_5_0_0_0() { return cMembersThenParserRuleCall_5_0_0_0; }

		//ThenReference
		public RuleCall getMembersThenReferenceParserRuleCall_5_0_0_1() { return cMembersThenReferenceParserRuleCall_5_0_0_1; }

		//members+=(And | AndReference | But | ButReference)*
		public Assignment getMembersAssignment_5_1() { return cMembersAssignment_5_1; }

		//(And | AndReference | But | ButReference)
		public Alternatives getMembersAlternatives_5_1_0() { return cMembersAlternatives_5_1_0; }

		//And
		public RuleCall getMembersAndParserRuleCall_5_1_0_0() { return cMembersAndParserRuleCall_5_1_0_0; }

		//AndReference
		public RuleCall getMembersAndReferenceParserRuleCall_5_1_0_1() { return cMembersAndReferenceParserRuleCall_5_1_0_1; }

		//But
		public RuleCall getMembersButParserRuleCall_5_1_0_2() { return cMembersButParserRuleCall_5_1_0_2; }

		//ButReference
		public RuleCall getMembersButReferenceParserRuleCall_5_1_0_3() { return cMembersButReferenceParserRuleCall_5_1_0_3; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJnarioMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cJnarioFieldAnnotationInfoAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cModifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_1_0 = (RuleCall)cModifiersAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Group cGroup_2_2_0 = (Group)cAlternatives_2_2.eContents().get(0);
		private final Assignment cModifiersAssignment_2_2_0_0 = (Assignment)cGroup_2_2_0.eContents().get(0);
		private final RuleCall cModifiersFieldModifierParserRuleCall_2_2_0_0_0 = (RuleCall)cModifiersAssignment_2_2_0_0.eContents().get(0);
		private final Assignment cModifiersAssignment_2_2_0_1 = (Assignment)cGroup_2_2_0.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_2_0_1_0 = (RuleCall)cModifiersAssignment_2_2_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_2_0_2 = (Assignment)cGroup_2_2_0.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_2_0_2_0 = (RuleCall)cTypeAssignment_2_2_0_2.eContents().get(0);
		private final Assignment cNameAssignment_2_2_0_3 = (Assignment)cGroup_2_2_0.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_2_2_0_3_0 = (RuleCall)cNameAssignment_2_2_0_3.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cAlternatives_2_2.eContents().get(1);
		private final Assignment cModifiersAssignment_2_2_1_0 = (Assignment)cGroup_2_2_1.eContents().get(0);
		private final Keyword cModifiersExtensionKeyword_2_2_1_0_0 = (Keyword)cModifiersAssignment_2_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_2_1_1 = (Alternatives)cGroup_2_2_1.eContents().get(1);
		private final Assignment cModifiersAssignment_2_2_1_1_0 = (Assignment)cAlternatives_2_2_1_1.eContents().get(0);
		private final RuleCall cModifiersFieldModifierParserRuleCall_2_2_1_1_0_0 = (RuleCall)cModifiersAssignment_2_2_1_1_0.eContents().get(0);
		private final Assignment cModifiersAssignment_2_2_1_1_1 = (Assignment)cAlternatives_2_2_1_1.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_2_1_1_1_0 = (RuleCall)cModifiersAssignment_2_2_1_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_2_1_2 = (Assignment)cGroup_2_2_1.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_2_1_2_0 = (RuleCall)cTypeAssignment_2_2_1_2.eContents().get(0);
		private final Assignment cNameAssignment_2_2_1_3 = (Assignment)cGroup_2_2_1.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_2_2_1_3_0 = (RuleCall)cNameAssignment_2_2_1_3.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cAlternatives_2_2.eContents().get(2);
		private final Assignment cModifiersAssignment_2_2_2_0 = (Assignment)cGroup_2_2_2.eContents().get(0);
		private final RuleCall cModifiersFieldModifierParserRuleCall_2_2_2_0_0 = (RuleCall)cModifiersAssignment_2_2_2_0.eContents().get(0);
		private final Assignment cModifiersAssignment_2_2_2_1 = (Assignment)cGroup_2_2_2.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_2_2_1_0 = (RuleCall)cModifiersAssignment_2_2_2_1.eContents().get(0);
		private final Assignment cModifiersAssignment_2_2_2_2 = (Assignment)cGroup_2_2_2.eContents().get(2);
		private final Keyword cModifiersExtensionKeyword_2_2_2_2_0 = (Keyword)cModifiersAssignment_2_2_2_2.eContents().get(0);
		private final Assignment cModifiersAssignment_2_2_2_3 = (Assignment)cGroup_2_2_2.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_2_2_3_0 = (RuleCall)cModifiersAssignment_2_2_2_3.eContents().get(0);
		private final Assignment cTypeAssignment_2_2_2_4 = (Assignment)cGroup_2_2_2.eContents().get(4);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_2_2_4_0 = (RuleCall)cTypeAssignment_2_2_2_4.eContents().get(0);
		private final Assignment cNameAssignment_2_2_2_5 = (Assignment)cGroup_2_2_2.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_2_2_2_5_0 = (RuleCall)cNameAssignment_2_2_2_5.eContents().get(0);
		private final Group cGroup_2_2_3 = (Group)cAlternatives_2_2.eContents().get(3);
		private final Assignment cTypeAssignment_2_2_3_0 = (Assignment)cGroup_2_2_3.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_2_3_0_0 = (RuleCall)cTypeAssignment_2_2_3_0.eContents().get(0);
		private final Assignment cNameAssignment_2_2_3_1 = (Assignment)cGroup_2_2_3.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_2_3_1_0 = (RuleCall)cNameAssignment_2_2_3_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cEqualsSignKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cInitialValueXExpressionParserRuleCall_2_3_1_0 = (RuleCall)cInitialValueAssignment_2_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Member JnarioMember:
		//	{JnarioMember} annotations+=XAnnotation* ({JnarioField.annotationInfo=current} modifiers+=CommonModifier*
		//	(modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID | modifiers+='extension'
		//	(modifiers+=FieldModifier | modifiers+=CommonModifier)* type=JvmTypeReference name=ValidID? |
		//	modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+='extension' modifiers+=CommonModifier*
		//	type=JvmTypeReference name=ValidID? | type=JvmTypeReference name=ValidID) ('=' initialValue=XExpression)? ';'?)
		@Override public ParserRule getRule() { return rule; }

		//{JnarioMember} annotations+=XAnnotation* ({JnarioField.annotationInfo=current} modifiers+=CommonModifier*
		//(modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID | modifiers+='extension'
		//(modifiers+=FieldModifier | modifiers+=CommonModifier)* type=JvmTypeReference name=ValidID? | modifiers+=FieldModifier
		//modifiers+=CommonModifier* modifiers+='extension' modifiers+=CommonModifier* type=JvmTypeReference name=ValidID? |
		//type=JvmTypeReference name=ValidID) ('=' initialValue=XExpression)? ';'?)
		public Group getGroup() { return cGroup; }

		//{JnarioMember}
		public Action getJnarioMemberAction_0() { return cJnarioMemberAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//({JnarioField.annotationInfo=current} modifiers+=CommonModifier* (modifiers+=FieldModifier modifiers+=CommonModifier*
		//type=JvmTypeReference? name=ValidID | modifiers+='extension' (modifiers+=FieldModifier | modifiers+=CommonModifier)*
		//type=JvmTypeReference name=ValidID? | modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+='extension'
		//modifiers+=CommonModifier* type=JvmTypeReference name=ValidID? | type=JvmTypeReference name=ValidID) ('='
		//initialValue=XExpression)? ';'?)
		public Group getGroup_2() { return cGroup_2; }

		//{JnarioField.annotationInfo=current}
		public Action getJnarioFieldAnnotationInfoAction_2_0() { return cJnarioFieldAnnotationInfoAction_2_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_2_1() { return cModifiersAssignment_2_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_1_0() { return cModifiersCommonModifierParserRuleCall_2_1_0; }

		//(modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID | modifiers+='extension'
		//(modifiers+=FieldModifier | modifiers+=CommonModifier)* type=JvmTypeReference name=ValidID? | modifiers+=FieldModifier
		//modifiers+=CommonModifier* modifiers+='extension' modifiers+=CommonModifier* type=JvmTypeReference name=ValidID? |
		//type=JvmTypeReference name=ValidID)
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID
		public Group getGroup_2_2_0() { return cGroup_2_2_0; }

		//modifiers+=FieldModifier
		public Assignment getModifiersAssignment_2_2_0_0() { return cModifiersAssignment_2_2_0_0; }

		//FieldModifier
		public RuleCall getModifiersFieldModifierParserRuleCall_2_2_0_0_0() { return cModifiersFieldModifierParserRuleCall_2_2_0_0_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_2_2_0_1() { return cModifiersAssignment_2_2_0_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_2_0_1_0() { return cModifiersCommonModifierParserRuleCall_2_2_0_1_0; }

		//type=JvmTypeReference?
		public Assignment getTypeAssignment_2_2_0_2() { return cTypeAssignment_2_2_0_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_2_0_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_2_0_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_2_0_3() { return cNameAssignment_2_2_0_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_2_0_3_0() { return cNameValidIDParserRuleCall_2_2_0_3_0; }

		//modifiers+='extension' (modifiers+=FieldModifier | modifiers+=CommonModifier)* type=JvmTypeReference name=ValidID?
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//modifiers+='extension'
		public Assignment getModifiersAssignment_2_2_1_0() { return cModifiersAssignment_2_2_1_0; }

		//'extension'
		public Keyword getModifiersExtensionKeyword_2_2_1_0_0() { return cModifiersExtensionKeyword_2_2_1_0_0; }

		//(modifiers+=FieldModifier | modifiers+=CommonModifier)*
		public Alternatives getAlternatives_2_2_1_1() { return cAlternatives_2_2_1_1; }

		//modifiers+=FieldModifier
		public Assignment getModifiersAssignment_2_2_1_1_0() { return cModifiersAssignment_2_2_1_1_0; }

		//FieldModifier
		public RuleCall getModifiersFieldModifierParserRuleCall_2_2_1_1_0_0() { return cModifiersFieldModifierParserRuleCall_2_2_1_1_0_0; }

		//modifiers+=CommonModifier
		public Assignment getModifiersAssignment_2_2_1_1_1() { return cModifiersAssignment_2_2_1_1_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_2_1_1_1_0() { return cModifiersCommonModifierParserRuleCall_2_2_1_1_1_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_2_1_2() { return cTypeAssignment_2_2_1_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_2_1_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_2_1_2_0; }

		//name=ValidID?
		public Assignment getNameAssignment_2_2_1_3() { return cNameAssignment_2_2_1_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_2_1_3_0() { return cNameValidIDParserRuleCall_2_2_1_3_0; }

		//modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+='extension' modifiers+=CommonModifier*
		//type=JvmTypeReference name=ValidID?
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }

		//modifiers+=FieldModifier
		public Assignment getModifiersAssignment_2_2_2_0() { return cModifiersAssignment_2_2_2_0; }

		//FieldModifier
		public RuleCall getModifiersFieldModifierParserRuleCall_2_2_2_0_0() { return cModifiersFieldModifierParserRuleCall_2_2_2_0_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_2_2_2_1() { return cModifiersAssignment_2_2_2_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_2_2_1_0() { return cModifiersCommonModifierParserRuleCall_2_2_2_1_0; }

		//modifiers+='extension'
		public Assignment getModifiersAssignment_2_2_2_2() { return cModifiersAssignment_2_2_2_2; }

		//'extension'
		public Keyword getModifiersExtensionKeyword_2_2_2_2_0() { return cModifiersExtensionKeyword_2_2_2_2_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_2_2_2_3() { return cModifiersAssignment_2_2_2_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_2_2_3_0() { return cModifiersCommonModifierParserRuleCall_2_2_2_3_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_2_2_4() { return cTypeAssignment_2_2_2_4; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_2_2_4_0() { return cTypeJvmTypeReferenceParserRuleCall_2_2_2_4_0; }

		//name=ValidID?
		public Assignment getNameAssignment_2_2_2_5() { return cNameAssignment_2_2_2_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_2_2_5_0() { return cNameValidIDParserRuleCall_2_2_2_5_0; }

		//type=JvmTypeReference name=ValidID
		public Group getGroup_2_2_3() { return cGroup_2_2_3; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_2_3_0() { return cTypeAssignment_2_2_3_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_2_3_0_0() { return cTypeJvmTypeReferenceParserRuleCall_2_2_3_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_2_3_1() { return cNameAssignment_2_2_3_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_2_3_1_0() { return cNameValidIDParserRuleCall_2_2_3_1_0; }

		//('=' initialValue=XExpression)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//'='
		public Keyword getEqualsSignKeyword_2_3_0() { return cEqualsSignKeyword_2_3_0; }

		//initialValue=XExpression
		public Assignment getInitialValueAssignment_2_3_1() { return cInitialValueAssignment_2_3_1; }

		//XExpression
		public RuleCall getInitialValueXExpressionParserRuleCall_2_3_1_0() { return cInitialValueXExpressionParserRuleCall_2_3_1_0; }

		//';'?
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
	}

	public class GivenReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.GivenReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGivenReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceGivenCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceGivenGIVEN_TEXTTerminalRuleCall_1_0_1 = (RuleCall)cReferenceGivenCrossReference_1_0.eContents().get(1);
		
		//GivenReference:
		//	{GivenReference} reference=[Given|GIVEN_TEXT];
		@Override public ParserRule getRule() { return rule; }

		//{GivenReference} reference=[Given|GIVEN_TEXT]
		public Group getGroup() { return cGroup; }

		//{GivenReference}
		public Action getGivenReferenceAction_0() { return cGivenReferenceAction_0; }

		//reference=[Given|GIVEN_TEXT]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[Given|GIVEN_TEXT]
		public CrossReference getReferenceGivenCrossReference_1_0() { return cReferenceGivenCrossReference_1_0; }

		//GIVEN_TEXT
		public RuleCall getReferenceGivenGIVEN_TEXTTerminalRuleCall_1_0_1() { return cReferenceGivenGIVEN_TEXTTerminalRuleCall_1_0_1; }
	}

	public class GivenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.Given");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGivenAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameGIVEN_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBlockExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Given:
		//	{Given} name=GIVEN_TEXT expression=BlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//{Given} name=GIVEN_TEXT expression=BlockExpression
		public Group getGroup() { return cGroup; }

		//{Given}
		public Action getGivenAction_0() { return cGivenAction_0; }

		//name=GIVEN_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//GIVEN_TEXT
		public RuleCall getNameGIVEN_TEXTTerminalRuleCall_1_0() { return cNameGIVEN_TEXTTerminalRuleCall_1_0; }

		//expression=BlockExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BlockExpression
		public RuleCall getExpressionBlockExpressionParserRuleCall_2_0() { return cExpressionBlockExpressionParserRuleCall_2_0; }
	}

	public class WhenReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.WhenReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhenReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceWhenCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceWhenWHEN_TEXTTerminalRuleCall_1_0_1 = (RuleCall)cReferenceWhenCrossReference_1_0.eContents().get(1);
		
		//WhenReference:
		//	{WhenReference} reference=[When|WHEN_TEXT];
		@Override public ParserRule getRule() { return rule; }

		//{WhenReference} reference=[When|WHEN_TEXT]
		public Group getGroup() { return cGroup; }

		//{WhenReference}
		public Action getWhenReferenceAction_0() { return cWhenReferenceAction_0; }

		//reference=[When|WHEN_TEXT]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[When|WHEN_TEXT]
		public CrossReference getReferenceWhenCrossReference_1_0() { return cReferenceWhenCrossReference_1_0; }

		//WHEN_TEXT
		public RuleCall getReferenceWhenWHEN_TEXTTerminalRuleCall_1_0_1() { return cReferenceWhenWHEN_TEXTTerminalRuleCall_1_0_1; }
	}

	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhenAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameWHEN_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBlockExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//When:
		//	{When} name=WHEN_TEXT expression=BlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//{When} name=WHEN_TEXT expression=BlockExpression
		public Group getGroup() { return cGroup; }

		//{When}
		public Action getWhenAction_0() { return cWhenAction_0; }

		//name=WHEN_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//WHEN_TEXT
		public RuleCall getNameWHEN_TEXTTerminalRuleCall_1_0() { return cNameWHEN_TEXTTerminalRuleCall_1_0; }

		//expression=BlockExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BlockExpression
		public RuleCall getExpressionBlockExpressionParserRuleCall_2_0() { return cExpressionBlockExpressionParserRuleCall_2_0; }
	}

	public class ThenReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.ThenReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThenReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceThenCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceThenTHEN_TEXTTerminalRuleCall_1_0_1 = (RuleCall)cReferenceThenCrossReference_1_0.eContents().get(1);
		
		//ThenReference:
		//	{ThenReference} reference=[Then|THEN_TEXT];
		@Override public ParserRule getRule() { return rule; }

		//{ThenReference} reference=[Then|THEN_TEXT]
		public Group getGroup() { return cGroup; }

		//{ThenReference}
		public Action getThenReferenceAction_0() { return cThenReferenceAction_0; }

		//reference=[Then|THEN_TEXT]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[Then|THEN_TEXT]
		public CrossReference getReferenceThenCrossReference_1_0() { return cReferenceThenCrossReference_1_0; }

		//THEN_TEXT
		public RuleCall getReferenceThenTHEN_TEXTTerminalRuleCall_1_0_1() { return cReferenceThenTHEN_TEXTTerminalRuleCall_1_0_1; }
	}

	public class ThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.Then");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThenAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTHEN_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBlockExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Then:
		//	{Then} name=THEN_TEXT expression=BlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//{Then} name=THEN_TEXT expression=BlockExpression
		public Group getGroup() { return cGroup; }

		//{Then}
		public Action getThenAction_0() { return cThenAction_0; }

		//name=THEN_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//THEN_TEXT
		public RuleCall getNameTHEN_TEXTTerminalRuleCall_1_0() { return cNameTHEN_TEXTTerminalRuleCall_1_0; }

		//expression=BlockExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BlockExpression
		public RuleCall getExpressionBlockExpressionParserRuleCall_2_0() { return cExpressionBlockExpressionParserRuleCall_2_0; }
	}

	public class AndReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.AndReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceAndCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceAndAND_TEXTTerminalRuleCall_1_0_1 = (RuleCall)cReferenceAndCrossReference_1_0.eContents().get(1);
		
		//AndReference:
		//	{AndReference} reference=[And|AND_TEXT];
		@Override public ParserRule getRule() { return rule; }

		//{AndReference} reference=[And|AND_TEXT]
		public Group getGroup() { return cGroup; }

		//{AndReference}
		public Action getAndReferenceAction_0() { return cAndReferenceAction_0; }

		//reference=[And|AND_TEXT]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[And|AND_TEXT]
		public CrossReference getReferenceAndCrossReference_1_0() { return cReferenceAndCrossReference_1_0; }

		//AND_TEXT
		public RuleCall getReferenceAndAND_TEXTTerminalRuleCall_1_0_1() { return cReferenceAndAND_TEXTTerminalRuleCall_1_0_1; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAND_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBlockExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//And:
		//	{And} name=AND_TEXT expression=BlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//{And} name=AND_TEXT expression=BlockExpression
		public Group getGroup() { return cGroup; }

		//{And}
		public Action getAndAction_0() { return cAndAction_0; }

		//name=AND_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AND_TEXT
		public RuleCall getNameAND_TEXTTerminalRuleCall_1_0() { return cNameAND_TEXTTerminalRuleCall_1_0; }

		//expression=BlockExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BlockExpression
		public RuleCall getExpressionBlockExpressionParserRuleCall_2_0() { return cExpressionBlockExpressionParserRuleCall_2_0; }
	}

	public class ButReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.ButReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cButReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceButCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceButBUT_TEXTTerminalRuleCall_1_0_1 = (RuleCall)cReferenceButCrossReference_1_0.eContents().get(1);
		
		//ButReference:
		//	{ButReference} reference=[But|BUT_TEXT];
		@Override public ParserRule getRule() { return rule; }

		//{ButReference} reference=[But|BUT_TEXT]
		public Group getGroup() { return cGroup; }

		//{ButReference}
		public Action getButReferenceAction_0() { return cButReferenceAction_0; }

		//reference=[But|BUT_TEXT]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[But|BUT_TEXT]
		public CrossReference getReferenceButCrossReference_1_0() { return cReferenceButCrossReference_1_0; }

		//BUT_TEXT
		public RuleCall getReferenceButBUT_TEXTTerminalRuleCall_1_0_1() { return cReferenceButBUT_TEXTTerminalRuleCall_1_0_1; }
	}

	public class ButElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.But");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cButAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameBUT_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBlockExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//But:
		//	{But} name=BUT_TEXT expression=BlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//{But} name=BUT_TEXT expression=BlockExpression
		public Group getGroup() { return cGroup; }

		//{But}
		public Action getButAction_0() { return cButAction_0; }

		//name=BUT_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//BUT_TEXT
		public RuleCall getNameBUT_TEXTTerminalRuleCall_1_0() { return cNameBUT_TEXTTerminalRuleCall_1_0; }

		//expression=BlockExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BlockExpression
		public RuleCall getExpressionBlockExpressionParserRuleCall_2_0() { return cExpressionBlockExpressionParserRuleCall_2_0; }
	}

	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsXExpressionOrVarDeclarationParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// *
		// * artificial node to simplify folding
		// * / BlockExpression xbase::XBlockExpression:
		//	(expressions+=XExpressionOrVarDeclaration ';'?)+
		@Override public ParserRule getRule() { return rule; }

		//(expressions+=XExpressionOrVarDeclaration ';'?)+
		public Group getGroup() { return cGroup; }

		//expressions+=XExpressionOrVarDeclaration
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//XExpressionOrVarDeclaration
		public RuleCall getExpressionsXExpressionOrVarDeclarationParserRuleCall_0_0() { return cExpressionsXExpressionOrVarDeclarationParserRuleCall_0_0; }

		//';'?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXSynchronizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXFeatureCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXIfExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXForLoopExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXBasicForLoopExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXWhileExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXDoWhileExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXThrowExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXReturnExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cAssertionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		////ExampleTable:
		// //	name=EXAMPLE_TEXT
		// //	columns+=ExampleColumn+ EXAMPLE_ROW_END
		// //	(rows += ExampleRow)*;
		// //
		// //
		//
		////ExampleColumn: 
		// //	(PIPE | PIPE_SPACES) type=JvmTypeReference? name=ValidID ;
		// //
		// //ExampleRow:
		//
		////	((PIPE | PIPE_SPACES) cells+=XExpression)+ EXAMPLE_ROW_END;
		// XPrimaryExpression xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | Assertion
		@Override public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | Assertion
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XSynchronizedExpression
		public RuleCall getXSynchronizedExpressionParserRuleCall_3() { return cXSynchronizedExpressionParserRuleCall_3; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_4() { return cXFeatureCallParserRuleCall_4; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_5() { return cXLiteralParserRuleCall_5; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_6() { return cXIfExpressionParserRuleCall_6; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_7() { return cXForLoopExpressionParserRuleCall_7; }

		//XBasicForLoopExpression
		public RuleCall getXBasicForLoopExpressionParserRuleCall_8() { return cXBasicForLoopExpressionParserRuleCall_8; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_9() { return cXWhileExpressionParserRuleCall_9; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_10() { return cXDoWhileExpressionParserRuleCall_10; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_11() { return cXThrowExpressionParserRuleCall_11; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_12() { return cXReturnExpressionParserRuleCall_12; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_13() { return cXTryCatchFinallyExpressionParserRuleCall_13; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_14() { return cXParenthesizedExpressionParserRuleCall_14; }

		//Assertion
		public RuleCall getAssertionParserRuleCall_15() { return cAssertionParserRuleCall_15; }
	}

	public class XRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.XRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cShouldLeftOperandAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_0_1 = (Assignment)cGroup_1_0_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementShouldParserRuleCall_1_0_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightOperandXOtherOperatorExpressionParserRuleCall_1_0_1_0 = (RuleCall)cRightOperandAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cShouldThrowExpressionAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_0_1 = (Alternatives)cGroup_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_0_0_1_0 = (Group)cAlternatives_1_1_0_0_1.eContents().get(0);
		private final Keyword cShouldKeyword_1_1_0_0_1_0_0 = (Keyword)cGroup_1_1_0_0_1_0.eContents().get(0);
		private final Keyword cThrowKeyword_1_1_0_0_1_0_1 = (Keyword)cGroup_1_1_0_0_1_0.eContents().get(1);
		private final Keyword cThrowsKeyword_1_1_0_0_1_1 = (Keyword)cAlternatives_1_1_0_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cXInstanceOfExpressionExpressionAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cTypeAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_0_0 = (Group)cGroup_1_3_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_3_0_0_0 = (Action)cGroup_1_3_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_3_0_0_1 = (Assignment)cGroup_1_3_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0 = (CrossReference)cFeatureAssignment_1_3_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_3_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRightOperandXOtherOperatorExpressionParserRuleCall_1_3_1_0 = (RuleCall)cRightOperandAssignment_1_3_1.eContents().get(0);
		
		//XRelationalExpression xbase::XExpression:
		//	XOtherOperatorExpression (=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should])
		//	rightOperand=XOtherOperatorExpression | => ({ShouldThrow.expression=current} ('should' 'throw' | 'throws'))
		//	type=JvmTypeReference | => ({xbase::XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
		//	=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//	rightOperand=XOtherOperatorExpression)*
		@Override public ParserRule getRule() { return rule; }

		//XOtherOperatorExpression (=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should])
		//rightOperand=XOtherOperatorExpression | => ({ShouldThrow.expression=current} ('should' 'throw' | 'throws'))
		//type=JvmTypeReference | => ({xbase::XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
		//({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XOtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//XOtherOperatorExpression
		public RuleCall getXOtherOperatorExpressionParserRuleCall_0() { return cXOtherOperatorExpressionParserRuleCall_0; }

		//(=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]) rightOperand=XOtherOperatorExpression
		//| => ({ShouldThrow.expression=current} ('should' 'throw' | 'throws')) type=JvmTypeReference | =>
		//({xbase::XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
		//({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XOtherOperatorExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]) rightOperand=XOtherOperatorExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should])
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should])
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Should.leftOperand=current}
		public Action getShouldLeftOperandAction_1_0_0_0_0() { return cShouldLeftOperandAction_1_0_0_0_0; }

		//feature=[types::JvmIdentifiableElement|Should]
		public Assignment getFeatureAssignment_1_0_0_0_1() { return cFeatureAssignment_1_0_0_0_1; }

		//[types::JvmIdentifiableElement|Should]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0; }

		//Should
		public RuleCall getFeatureJvmIdentifiableElementShouldParserRuleCall_1_0_0_0_1_0_1() { return cFeatureJvmIdentifiableElementShouldParserRuleCall_1_0_0_0_1_0_1; }

		//rightOperand=XOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_0_1() { return cRightOperandAssignment_1_0_1; }

		//XOtherOperatorExpression
		public RuleCall getRightOperandXOtherOperatorExpressionParserRuleCall_1_0_1_0() { return cRightOperandXOtherOperatorExpressionParserRuleCall_1_0_1_0; }

		//=> ({ShouldThrow.expression=current} ('should' 'throw' | 'throws')) type=JvmTypeReference
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({ShouldThrow.expression=current} ('should' 'throw' | 'throws'))
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//({ShouldThrow.expression=current} ('should' 'throw' | 'throws'))
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{ShouldThrow.expression=current}
		public Action getShouldThrowExpressionAction_1_1_0_0_0() { return cShouldThrowExpressionAction_1_1_0_0_0; }

		//('should' 'throw' | 'throws')
		public Alternatives getAlternatives_1_1_0_0_1() { return cAlternatives_1_1_0_0_1; }

		//'should' 'throw'
		public Group getGroup_1_1_0_0_1_0() { return cGroup_1_1_0_0_1_0; }

		//'should'
		public Keyword getShouldKeyword_1_1_0_0_1_0_0() { return cShouldKeyword_1_1_0_0_1_0_0; }

		//'throw'
		public Keyword getThrowKeyword_1_1_0_0_1_0_1() { return cThrowKeyword_1_1_0_0_1_0_1; }

		//'throws'
		public Keyword getThrowsKeyword_1_1_0_0_1_1() { return cThrowsKeyword_1_1_0_0_1_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_1_1() { return cTypeAssignment_1_1_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_1_1_0; }

		//=> ({xbase::XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({xbase::XInstanceOfExpression.expression=current} 'instanceof')
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//({xbase::XInstanceOfExpression.expression=current} 'instanceof')
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{xbase::XInstanceOfExpression.expression=current}
		public Action getXInstanceOfExpressionExpressionAction_1_2_0_0_0() { return cXInstanceOfExpressionExpressionAction_1_2_0_0_0; }

		//'instanceof'
		public Keyword getInstanceofKeyword_1_2_0_0_1() { return cInstanceofKeyword_1_2_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_2_1() { return cTypeAssignment_1_2_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_2_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_2_1_0; }

		//=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XOtherOperatorExpression
		public Group getGroup_1_3() { return cGroup_1_3; }

		//=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }

		//({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		public Group getGroup_1_3_0_0() { return cGroup_1_3_0_0; }

		//{xbase::XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_3_0_0_0() { return cXBinaryOperationLeftOperandAction_1_3_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpCompare]
		public Assignment getFeatureAssignment_1_3_0_0_1() { return cFeatureAssignment_1_3_0_0_1; }

		//[types::JvmIdentifiableElement|OpCompare]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0; }

		//OpCompare
		public RuleCall getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_3_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_3_0_0_1_0_1; }

		//rightOperand=XOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_3_1() { return cRightOperandAssignment_1_3_1; }

		//XOtherOperatorExpression
		public RuleCall getRightOperandXOtherOperatorExpressionParserRuleCall_1_3_1_0() { return cRightOperandXOtherOperatorExpressionParserRuleCall_1_3_1_0; }
	}

	public class ShouldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.Should");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShouldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Should:
		//	'should' 'not'? ID;
		@Override public ParserRule getRule() { return rule; }

		//'should' 'not'? ID
		public Group getGroup() { return cGroup; }

		//'should'
		public Keyword getShouldKeyword_0() { return cShouldKeyword_0; }

		//'not'?
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}

	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssertionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssertKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assertion:
		//	{Assertion} 'assert' expression=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//{Assertion} 'assert' expression=XExpression
		public Group getGroup() { return cGroup; }

		//{Assertion}
		public Action getAssertionAction_0() { return cAssertionAction_0; }

		//'assert'
		public Keyword getAssertKeyword_1() { return cAssertKeyword_1; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }
	}

	public class AnonymousMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.AnonymousMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJnarioMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Action cJnarioFieldAnnotationInfoAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Assignment cModifiersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_0_1_0 = (RuleCall)cModifiersAssignment_2_0_1.eContents().get(0);
		private final Alternatives cAlternatives_2_0_2 = (Alternatives)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_0_2_0 = (Group)cAlternatives_2_0_2.eContents().get(0);
		private final Assignment cModifiersAssignment_2_0_2_0_0 = (Assignment)cGroup_2_0_2_0.eContents().get(0);
		private final RuleCall cModifiersFieldModifierParserRuleCall_2_0_2_0_0_0 = (RuleCall)cModifiersAssignment_2_0_2_0_0.eContents().get(0);
		private final Assignment cModifiersAssignment_2_0_2_0_1 = (Assignment)cGroup_2_0_2_0.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_0_2_0_1_0 = (RuleCall)cModifiersAssignment_2_0_2_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_2_0_2 = (Assignment)cGroup_2_0_2_0.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0_2_0_2_0 = (RuleCall)cTypeAssignment_2_0_2_0_2.eContents().get(0);
		private final Assignment cNameAssignment_2_0_2_0_3 = (Assignment)cGroup_2_0_2_0.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_2_0_2_0_3_0 = (RuleCall)cNameAssignment_2_0_2_0_3.eContents().get(0);
		private final Group cGroup_2_0_2_1 = (Group)cAlternatives_2_0_2.eContents().get(1);
		private final Assignment cModifiersAssignment_2_0_2_1_0 = (Assignment)cGroup_2_0_2_1.eContents().get(0);
		private final Keyword cModifiersExtensionKeyword_2_0_2_1_0_0 = (Keyword)cModifiersAssignment_2_0_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_0_2_1_1 = (Alternatives)cGroup_2_0_2_1.eContents().get(1);
		private final Assignment cModifiersAssignment_2_0_2_1_1_0 = (Assignment)cAlternatives_2_0_2_1_1.eContents().get(0);
		private final RuleCall cModifiersFieldModifierParserRuleCall_2_0_2_1_1_0_0 = (RuleCall)cModifiersAssignment_2_0_2_1_1_0.eContents().get(0);
		private final Assignment cModifiersAssignment_2_0_2_1_1_1 = (Assignment)cAlternatives_2_0_2_1_1.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_0_2_1_1_1_0 = (RuleCall)cModifiersAssignment_2_0_2_1_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_2_1_2 = (Assignment)cGroup_2_0_2_1.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0_2_1_2_0 = (RuleCall)cTypeAssignment_2_0_2_1_2.eContents().get(0);
		private final Assignment cNameAssignment_2_0_2_1_3 = (Assignment)cGroup_2_0_2_1.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_2_0_2_1_3_0 = (RuleCall)cNameAssignment_2_0_2_1_3.eContents().get(0);
		private final Group cGroup_2_0_2_2 = (Group)cAlternatives_2_0_2.eContents().get(2);
		private final Assignment cModifiersAssignment_2_0_2_2_0 = (Assignment)cGroup_2_0_2_2.eContents().get(0);
		private final RuleCall cModifiersFieldModifierParserRuleCall_2_0_2_2_0_0 = (RuleCall)cModifiersAssignment_2_0_2_2_0.eContents().get(0);
		private final Assignment cModifiersAssignment_2_0_2_2_1 = (Assignment)cGroup_2_0_2_2.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_0_2_2_1_0 = (RuleCall)cModifiersAssignment_2_0_2_2_1.eContents().get(0);
		private final Assignment cModifiersAssignment_2_0_2_2_2 = (Assignment)cGroup_2_0_2_2.eContents().get(2);
		private final Keyword cModifiersExtensionKeyword_2_0_2_2_2_0 = (Keyword)cModifiersAssignment_2_0_2_2_2.eContents().get(0);
		private final Assignment cModifiersAssignment_2_0_2_2_3 = (Assignment)cGroup_2_0_2_2.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_0_2_2_3_0 = (RuleCall)cModifiersAssignment_2_0_2_2_3.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_2_2_4 = (Assignment)cGroup_2_0_2_2.eContents().get(4);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0_2_2_4_0 = (RuleCall)cTypeAssignment_2_0_2_2_4.eContents().get(0);
		private final Assignment cNameAssignment_2_0_2_2_5 = (Assignment)cGroup_2_0_2_2.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_2_0_2_2_5_0 = (RuleCall)cNameAssignment_2_0_2_2_5.eContents().get(0);
		private final Group cGroup_2_0_2_3 = (Group)cAlternatives_2_0_2.eContents().get(3);
		private final Assignment cTypeAssignment_2_0_2_3_0 = (Assignment)cGroup_2_0_2_3.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0_2_3_0_0 = (RuleCall)cTypeAssignment_2_0_2_3_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_2_3_1 = (Assignment)cGroup_2_0_2_3.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_0_2_3_1_0 = (RuleCall)cNameAssignment_2_0_2_3_1.eContents().get(0);
		private final Group cGroup_2_0_3 = (Group)cGroup_2_0.eContents().get(3);
		private final Keyword cEqualsSignKeyword_2_0_3_0 = (Keyword)cGroup_2_0_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_0_3_1 = (Assignment)cGroup_2_0_3.eContents().get(1);
		private final RuleCall cInitialValueXExpressionParserRuleCall_2_0_3_1_0 = (RuleCall)cInitialValueAssignment_2_0_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_4 = (Keyword)cGroup_2_0.eContents().get(4);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Action cJnarioFunctionAnnotationInfoAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Assignment cModifiersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_1_1_0 = (RuleCall)cModifiersAssignment_2_1_1.eContents().get(0);
		private final Assignment cModifiersAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cModifiersMethodModifierParserRuleCall_2_1_2_0 = (RuleCall)cModifiersAssignment_2_1_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1_3 = (Alternatives)cGroup_2_1.eContents().get(3);
		private final Assignment cModifiersAssignment_2_1_3_0 = (Assignment)cAlternatives_2_1_3.eContents().get(0);
		private final RuleCall cModifiersCommonModifierParserRuleCall_2_1_3_0_0 = (RuleCall)cModifiersAssignment_2_1_3_0.eContents().get(0);
		private final Assignment cModifiersAssignment_2_1_3_1 = (Assignment)cAlternatives_2_1_3.eContents().get(1);
		private final RuleCall cModifiersMethodModifierParserRuleCall_2_1_3_1_0 = (RuleCall)cModifiersAssignment_2_1_3_1.eContents().get(0);
		private final Group cGroup_2_1_4 = (Group)cGroup_2_1.eContents().get(4);
		private final Keyword cLessThanSignKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_1_4_1_0 = (RuleCall)cTypeParametersAssignment_2_1_4_1.eContents().get(0);
		private final Group cGroup_2_1_4_2 = (Group)cGroup_2_1_4.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_4_2_0 = (Keyword)cGroup_2_1_4_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1_4_2_1 = (Assignment)cGroup_2_1_4_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_1_4_2_1_0 = (RuleCall)cTypeParametersAssignment_2_1_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1_4_3 = (Keyword)cGroup_2_1_4.eContents().get(3);
		private final Alternatives cAlternatives_2_1_5 = (Alternatives)cGroup_2_1.eContents().get(5);
		private final Group cGroup_2_1_5_0 = (Group)cAlternatives_2_1_5.eContents().get(0);
		private final Group cGroup_2_1_5_0_0 = (Group)cGroup_2_1_5_0.eContents().get(0);
		private final Assignment cReturnTypeAssignment_2_1_5_0_0_0 = (Assignment)cGroup_2_1_5_0_0.eContents().get(0);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_2_1_5_0_0_0_0 = (RuleCall)cReturnTypeAssignment_2_1_5_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1_5_0_0_1 = (Assignment)cGroup_2_1_5_0_0.eContents().get(1);
		private final RuleCall cNameFunctionIDParserRuleCall_2_1_5_0_0_1_0 = (RuleCall)cNameAssignment_2_1_5_0_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_5_0_0_2 = (Keyword)cGroup_2_1_5_0_0.eContents().get(2);
		private final Group cGroup_2_1_5_1 = (Group)cAlternatives_2_1_5.eContents().get(1);
		private final Group cGroup_2_1_5_1_0 = (Group)cGroup_2_1_5_1.eContents().get(0);
		private final Assignment cReturnTypeAssignment_2_1_5_1_0_0 = (Assignment)cGroup_2_1_5_1_0.eContents().get(0);
		private final RuleCall cReturnTypeTypeReferenceNoTypeArgsParserRuleCall_2_1_5_1_0_0_0 = (RuleCall)cReturnTypeAssignment_2_1_5_1_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1_5_1_0_1 = (Assignment)cGroup_2_1_5_1_0.eContents().get(1);
		private final RuleCall cNameFunctionIDParserRuleCall_2_1_5_1_0_1_0 = (RuleCall)cNameAssignment_2_1_5_1_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_5_1_0_2 = (Keyword)cGroup_2_1_5_1_0.eContents().get(2);
		private final Group cGroup_2_1_5_2 = (Group)cAlternatives_2_1_5.eContents().get(2);
		private final Assignment cNameAssignment_2_1_5_2_0 = (Assignment)cGroup_2_1_5_2.eContents().get(0);
		private final RuleCall cNameFunctionIDParserRuleCall_2_1_5_2_0_0 = (RuleCall)cNameAssignment_2_1_5_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_5_2_1 = (Keyword)cGroup_2_1_5_2.eContents().get(1);
		private final Group cGroup_2_1_6 = (Group)cGroup_2_1.eContents().get(6);
		private final Assignment cParametersAssignment_2_1_6_0 = (Assignment)cGroup_2_1_6.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_1_6_0_0 = (RuleCall)cParametersAssignment_2_1_6_0.eContents().get(0);
		private final Group cGroup_2_1_6_1 = (Group)cGroup_2_1_6.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_6_1_0 = (Keyword)cGroup_2_1_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_6_1_1 = (Assignment)cGroup_2_1_6_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_6_1_1_0 = (RuleCall)cParametersAssignment_2_1_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_7 = (Keyword)cGroup_2_1.eContents().get(7);
		private final Group cGroup_2_1_8 = (Group)cGroup_2_1.eContents().get(8);
		private final Keyword cThrowsKeyword_2_1_8_0 = (Keyword)cGroup_2_1_8.eContents().get(0);
		private final Assignment cExceptionsAssignment_2_1_8_1 = (Assignment)cGroup_2_1_8.eContents().get(1);
		private final RuleCall cExceptionsJvmTypeReferenceParserRuleCall_2_1_8_1_0 = (RuleCall)cExceptionsAssignment_2_1_8_1.eContents().get(0);
		private final Group cGroup_2_1_8_2 = (Group)cGroup_2_1_8.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_8_2_0 = (Keyword)cGroup_2_1_8_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_2_1_8_2_1 = (Assignment)cGroup_2_1_8_2.eContents().get(1);
		private final RuleCall cExceptionsJvmTypeReferenceParserRuleCall_2_1_8_2_1_0 = (RuleCall)cExceptionsAssignment_2_1_8_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_9 = (Alternatives)cGroup_2_1.eContents().get(9);
		private final Assignment cExpressionAssignment_2_1_9_0 = (Assignment)cAlternatives_2_1_9.eContents().get(0);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_2_1_9_0_0 = (RuleCall)cExpressionAssignment_2_1_9_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1_9_1 = (Assignment)cAlternatives_2_1_9.eContents().get(1);
		private final RuleCall cExpressionRichStringParserRuleCall_2_1_9_1_0 = (RuleCall)cExpressionAssignment_2_1_9_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_9_2 = (Keyword)cAlternatives_2_1_9.eContents().get(2);
		
		//AnonymousMember JnarioMember:
		//	{JnarioMember} annotations+=XAnnotation* ({JnarioField.annotationInfo=current} modifiers+=CommonModifier*
		//	(modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID | modifiers+='extension'
		//	(modifiers+=FieldModifier | modifiers+=CommonModifier)* type=JvmTypeReference name=ValidID? |
		//	modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+='extension' modifiers+=CommonModifier*
		//	type=JvmTypeReference name=ValidID? | type=JvmTypeReference name=ValidID) ('=' initialValue=XExpression)? ';'? |
		//	{JnarioFunction.annotationInfo=current} modifiers+=CommonModifier* modifiers+=MethodModifier
		//	(modifiers+=CommonModifier | modifiers+=MethodModifier)* ('<' typeParameters+=JvmTypeParameter (','
		//	typeParameters+=JvmTypeParameter)* '>')? (=> (returnType=JvmTypeReference name=FunctionID '(') | =>
		//	(returnType=TypeReferenceNoTypeArgs name=FunctionID '(') | name=FunctionID '(') (parameters+=Parameter (','
		//	parameters+=Parameter)*)? ')' ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		//	(expression=XBlockExpression | expression=RichString | ';')?)
		@Override public ParserRule getRule() { return rule; }

		//{JnarioMember} annotations+=XAnnotation* ({JnarioField.annotationInfo=current} modifiers+=CommonModifier*
		//(modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID | modifiers+='extension'
		//(modifiers+=FieldModifier | modifiers+=CommonModifier)* type=JvmTypeReference name=ValidID? | modifiers+=FieldModifier
		//modifiers+=CommonModifier* modifiers+='extension' modifiers+=CommonModifier* type=JvmTypeReference name=ValidID? |
		//type=JvmTypeReference name=ValidID) ('=' initialValue=XExpression)? ';'? | {JnarioFunction.annotationInfo=current}
		//modifiers+=CommonModifier* modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* ('<'
		//typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')? (=> (returnType=JvmTypeReference
		//name=FunctionID '(') | => (returnType=TypeReferenceNoTypeArgs name=FunctionID '(') | name=FunctionID '(')
		//(parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('throws' exceptions+=JvmTypeReference (','
		//exceptions+=JvmTypeReference)*)? (expression=XBlockExpression | expression=RichString | ';')?)
		public Group getGroup() { return cGroup; }

		//{JnarioMember}
		public Action getJnarioMemberAction_0() { return cJnarioMemberAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//({JnarioField.annotationInfo=current} modifiers+=CommonModifier* (modifiers+=FieldModifier modifiers+=CommonModifier*
		//type=JvmTypeReference? name=ValidID | modifiers+='extension' (modifiers+=FieldModifier | modifiers+=CommonModifier)*
		//type=JvmTypeReference name=ValidID? | modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+='extension'
		//modifiers+=CommonModifier* type=JvmTypeReference name=ValidID? | type=JvmTypeReference name=ValidID) ('='
		//initialValue=XExpression)? ';'? | {JnarioFunction.annotationInfo=current} modifiers+=CommonModifier*
		//modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* ('<'
		//typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')? (=> (returnType=JvmTypeReference
		//name=FunctionID '(') | => (returnType=TypeReferenceNoTypeArgs name=FunctionID '(') | name=FunctionID '(')
		//(parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('throws' exceptions+=JvmTypeReference (','
		//exceptions+=JvmTypeReference)*)? (expression=XBlockExpression | expression=RichString | ';')?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//{JnarioField.annotationInfo=current} modifiers+=CommonModifier* (modifiers+=FieldModifier modifiers+=CommonModifier*
		//type=JvmTypeReference? name=ValidID | modifiers+='extension' (modifiers+=FieldModifier | modifiers+=CommonModifier)*
		//type=JvmTypeReference name=ValidID? | modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+='extension'
		//modifiers+=CommonModifier* type=JvmTypeReference name=ValidID? | type=JvmTypeReference name=ValidID) ('='
		//initialValue=XExpression)? ';'?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//{JnarioField.annotationInfo=current}
		public Action getJnarioFieldAnnotationInfoAction_2_0_0() { return cJnarioFieldAnnotationInfoAction_2_0_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_2_0_1() { return cModifiersAssignment_2_0_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_0_1_0() { return cModifiersCommonModifierParserRuleCall_2_0_1_0; }

		//(modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID | modifiers+='extension'
		//(modifiers+=FieldModifier | modifiers+=CommonModifier)* type=JvmTypeReference name=ValidID? | modifiers+=FieldModifier
		//modifiers+=CommonModifier* modifiers+='extension' modifiers+=CommonModifier* type=JvmTypeReference name=ValidID? |
		//type=JvmTypeReference name=ValidID)
		public Alternatives getAlternatives_2_0_2() { return cAlternatives_2_0_2; }

		//modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID
		public Group getGroup_2_0_2_0() { return cGroup_2_0_2_0; }

		//modifiers+=FieldModifier
		public Assignment getModifiersAssignment_2_0_2_0_0() { return cModifiersAssignment_2_0_2_0_0; }

		//FieldModifier
		public RuleCall getModifiersFieldModifierParserRuleCall_2_0_2_0_0_0() { return cModifiersFieldModifierParserRuleCall_2_0_2_0_0_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_2_0_2_0_1() { return cModifiersAssignment_2_0_2_0_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_0_2_0_1_0() { return cModifiersCommonModifierParserRuleCall_2_0_2_0_1_0; }

		//type=JvmTypeReference?
		public Assignment getTypeAssignment_2_0_2_0_2() { return cTypeAssignment_2_0_2_0_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0_2_0_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0_2_0_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_0_2_0_3() { return cNameAssignment_2_0_2_0_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_2_0_3_0() { return cNameValidIDParserRuleCall_2_0_2_0_3_0; }

		//modifiers+='extension' (modifiers+=FieldModifier | modifiers+=CommonModifier)* type=JvmTypeReference name=ValidID?
		public Group getGroup_2_0_2_1() { return cGroup_2_0_2_1; }

		//modifiers+='extension'
		public Assignment getModifiersAssignment_2_0_2_1_0() { return cModifiersAssignment_2_0_2_1_0; }

		//'extension'
		public Keyword getModifiersExtensionKeyword_2_0_2_1_0_0() { return cModifiersExtensionKeyword_2_0_2_1_0_0; }

		//(modifiers+=FieldModifier | modifiers+=CommonModifier)*
		public Alternatives getAlternatives_2_0_2_1_1() { return cAlternatives_2_0_2_1_1; }

		//modifiers+=FieldModifier
		public Assignment getModifiersAssignment_2_0_2_1_1_0() { return cModifiersAssignment_2_0_2_1_1_0; }

		//FieldModifier
		public RuleCall getModifiersFieldModifierParserRuleCall_2_0_2_1_1_0_0() { return cModifiersFieldModifierParserRuleCall_2_0_2_1_1_0_0; }

		//modifiers+=CommonModifier
		public Assignment getModifiersAssignment_2_0_2_1_1_1() { return cModifiersAssignment_2_0_2_1_1_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_0_2_1_1_1_0() { return cModifiersCommonModifierParserRuleCall_2_0_2_1_1_1_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_0_2_1_2() { return cTypeAssignment_2_0_2_1_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0_2_1_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0_2_1_2_0; }

		//name=ValidID?
		public Assignment getNameAssignment_2_0_2_1_3() { return cNameAssignment_2_0_2_1_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_2_1_3_0() { return cNameValidIDParserRuleCall_2_0_2_1_3_0; }

		//modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+='extension' modifiers+=CommonModifier*
		//type=JvmTypeReference name=ValidID?
		public Group getGroup_2_0_2_2() { return cGroup_2_0_2_2; }

		//modifiers+=FieldModifier
		public Assignment getModifiersAssignment_2_0_2_2_0() { return cModifiersAssignment_2_0_2_2_0; }

		//FieldModifier
		public RuleCall getModifiersFieldModifierParserRuleCall_2_0_2_2_0_0() { return cModifiersFieldModifierParserRuleCall_2_0_2_2_0_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_2_0_2_2_1() { return cModifiersAssignment_2_0_2_2_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_0_2_2_1_0() { return cModifiersCommonModifierParserRuleCall_2_0_2_2_1_0; }

		//modifiers+='extension'
		public Assignment getModifiersAssignment_2_0_2_2_2() { return cModifiersAssignment_2_0_2_2_2; }

		//'extension'
		public Keyword getModifiersExtensionKeyword_2_0_2_2_2_0() { return cModifiersExtensionKeyword_2_0_2_2_2_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_2_0_2_2_3() { return cModifiersAssignment_2_0_2_2_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_0_2_2_3_0() { return cModifiersCommonModifierParserRuleCall_2_0_2_2_3_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_0_2_2_4() { return cTypeAssignment_2_0_2_2_4; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0_2_2_4_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0_2_2_4_0; }

		//name=ValidID?
		public Assignment getNameAssignment_2_0_2_2_5() { return cNameAssignment_2_0_2_2_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_2_2_5_0() { return cNameValidIDParserRuleCall_2_0_2_2_5_0; }

		//type=JvmTypeReference name=ValidID
		public Group getGroup_2_0_2_3() { return cGroup_2_0_2_3; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_0_2_3_0() { return cTypeAssignment_2_0_2_3_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0_2_3_0_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0_2_3_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_0_2_3_1() { return cNameAssignment_2_0_2_3_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_2_3_1_0() { return cNameValidIDParserRuleCall_2_0_2_3_1_0; }

		//('=' initialValue=XExpression)?
		public Group getGroup_2_0_3() { return cGroup_2_0_3; }

		//'='
		public Keyword getEqualsSignKeyword_2_0_3_0() { return cEqualsSignKeyword_2_0_3_0; }

		//initialValue=XExpression
		public Assignment getInitialValueAssignment_2_0_3_1() { return cInitialValueAssignment_2_0_3_1; }

		//XExpression
		public RuleCall getInitialValueXExpressionParserRuleCall_2_0_3_1_0() { return cInitialValueXExpressionParserRuleCall_2_0_3_1_0; }

		//';'?
		public Keyword getSemicolonKeyword_2_0_4() { return cSemicolonKeyword_2_0_4; }

		//{JnarioFunction.annotationInfo=current} modifiers+=CommonModifier* modifiers+=MethodModifier (modifiers+=CommonModifier
		//| modifiers+=MethodModifier)* ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')? (=>
		//(returnType=JvmTypeReference name=FunctionID '(') | => (returnType=TypeReferenceNoTypeArgs name=FunctionID '(') |
		//name=FunctionID '(') (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('throws' exceptions+=JvmTypeReference
		//(',' exceptions+=JvmTypeReference)*)? (expression=XBlockExpression | expression=RichString | ';')?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//{JnarioFunction.annotationInfo=current}
		public Action getJnarioFunctionAnnotationInfoAction_2_1_0() { return cJnarioFunctionAnnotationInfoAction_2_1_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_2_1_1() { return cModifiersAssignment_2_1_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_1_1_0() { return cModifiersCommonModifierParserRuleCall_2_1_1_0; }

		//modifiers+=MethodModifier
		public Assignment getModifiersAssignment_2_1_2() { return cModifiersAssignment_2_1_2; }

		//MethodModifier
		public RuleCall getModifiersMethodModifierParserRuleCall_2_1_2_0() { return cModifiersMethodModifierParserRuleCall_2_1_2_0; }

		//(modifiers+=CommonModifier | modifiers+=MethodModifier)*
		public Alternatives getAlternatives_2_1_3() { return cAlternatives_2_1_3; }

		//modifiers+=CommonModifier
		public Assignment getModifiersAssignment_2_1_3_0() { return cModifiersAssignment_2_1_3_0; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_2_1_3_0_0() { return cModifiersCommonModifierParserRuleCall_2_1_3_0_0; }

		//modifiers+=MethodModifier
		public Assignment getModifiersAssignment_2_1_3_1() { return cModifiersAssignment_2_1_3_1; }

		//MethodModifier
		public RuleCall getModifiersMethodModifierParserRuleCall_2_1_3_1_0() { return cModifiersMethodModifierParserRuleCall_2_1_3_1_0; }

		//('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }

		//'<'
		public Keyword getLessThanSignKeyword_2_1_4_0() { return cLessThanSignKeyword_2_1_4_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_1_4_1() { return cTypeParametersAssignment_2_1_4_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_1_4_1_0; }

		//(',' typeParameters+=JvmTypeParameter)*
		public Group getGroup_2_1_4_2() { return cGroup_2_1_4_2; }

		//','
		public Keyword getCommaKeyword_2_1_4_2_0() { return cCommaKeyword_2_1_4_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_1_4_2_1() { return cTypeParametersAssignment_2_1_4_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_1_4_2_1_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_2_1_4_3() { return cGreaterThanSignKeyword_2_1_4_3; }

		//(=> (returnType=JvmTypeReference name=FunctionID '(') | => (returnType=TypeReferenceNoTypeArgs name=FunctionID '(') |
		//name=FunctionID '(')
		public Alternatives getAlternatives_2_1_5() { return cAlternatives_2_1_5; }

		//=> (returnType=JvmTypeReference name=FunctionID '(')
		public Group getGroup_2_1_5_0() { return cGroup_2_1_5_0; }

		//(returnType=JvmTypeReference name=FunctionID '(')
		public Group getGroup_2_1_5_0_0() { return cGroup_2_1_5_0_0; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_2_1_5_0_0_0() { return cReturnTypeAssignment_2_1_5_0_0_0; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_2_1_5_0_0_0_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_2_1_5_0_0_0_0; }

		//name=FunctionID
		public Assignment getNameAssignment_2_1_5_0_0_1() { return cNameAssignment_2_1_5_0_0_1; }

		//FunctionID
		public RuleCall getNameFunctionIDParserRuleCall_2_1_5_0_0_1_0() { return cNameFunctionIDParserRuleCall_2_1_5_0_0_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_1_5_0_0_2() { return cLeftParenthesisKeyword_2_1_5_0_0_2; }

		//=> (returnType=TypeReferenceNoTypeArgs name=FunctionID '(')
		public Group getGroup_2_1_5_1() { return cGroup_2_1_5_1; }

		//(returnType=TypeReferenceNoTypeArgs name=FunctionID '(')
		public Group getGroup_2_1_5_1_0() { return cGroup_2_1_5_1_0; }

		//returnType=TypeReferenceNoTypeArgs
		public Assignment getReturnTypeAssignment_2_1_5_1_0_0() { return cReturnTypeAssignment_2_1_5_1_0_0; }

		//TypeReferenceNoTypeArgs
		public RuleCall getReturnTypeTypeReferenceNoTypeArgsParserRuleCall_2_1_5_1_0_0_0() { return cReturnTypeTypeReferenceNoTypeArgsParserRuleCall_2_1_5_1_0_0_0; }

		//name=FunctionID
		public Assignment getNameAssignment_2_1_5_1_0_1() { return cNameAssignment_2_1_5_1_0_1; }

		//FunctionID
		public RuleCall getNameFunctionIDParserRuleCall_2_1_5_1_0_1_0() { return cNameFunctionIDParserRuleCall_2_1_5_1_0_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_1_5_1_0_2() { return cLeftParenthesisKeyword_2_1_5_1_0_2; }

		//name=FunctionID '('
		public Group getGroup_2_1_5_2() { return cGroup_2_1_5_2; }

		//name=FunctionID
		public Assignment getNameAssignment_2_1_5_2_0() { return cNameAssignment_2_1_5_2_0; }

		//FunctionID
		public RuleCall getNameFunctionIDParserRuleCall_2_1_5_2_0_0() { return cNameFunctionIDParserRuleCall_2_1_5_2_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_1_5_2_1() { return cLeftParenthesisKeyword_2_1_5_2_1; }

		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_2_1_6() { return cGroup_2_1_6; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_6_0() { return cParametersAssignment_2_1_6_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_6_0_0() { return cParametersParameterParserRuleCall_2_1_6_0_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_2_1_6_1() { return cGroup_2_1_6_1; }

		//','
		public Keyword getCommaKeyword_2_1_6_1_0() { return cCommaKeyword_2_1_6_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_6_1_1() { return cParametersAssignment_2_1_6_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_6_1_1_0() { return cParametersParameterParserRuleCall_2_1_6_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_1_7() { return cRightParenthesisKeyword_2_1_7; }

		//('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		public Group getGroup_2_1_8() { return cGroup_2_1_8; }

		//'throws'
		public Keyword getThrowsKeyword_2_1_8_0() { return cThrowsKeyword_2_1_8_0; }

		//exceptions+=JvmTypeReference
		public Assignment getExceptionsAssignment_2_1_8_1() { return cExceptionsAssignment_2_1_8_1; }

		//JvmTypeReference
		public RuleCall getExceptionsJvmTypeReferenceParserRuleCall_2_1_8_1_0() { return cExceptionsJvmTypeReferenceParserRuleCall_2_1_8_1_0; }

		//(',' exceptions+=JvmTypeReference)*
		public Group getGroup_2_1_8_2() { return cGroup_2_1_8_2; }

		//','
		public Keyword getCommaKeyword_2_1_8_2_0() { return cCommaKeyword_2_1_8_2_0; }

		//exceptions+=JvmTypeReference
		public Assignment getExceptionsAssignment_2_1_8_2_1() { return cExceptionsAssignment_2_1_8_2_1; }

		//JvmTypeReference
		public RuleCall getExceptionsJvmTypeReferenceParserRuleCall_2_1_8_2_1_0() { return cExceptionsJvmTypeReferenceParserRuleCall_2_1_8_2_1_0; }

		//(expression=XBlockExpression | expression=RichString | ';')?
		public Alternatives getAlternatives_2_1_9() { return cAlternatives_2_1_9; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment_2_1_9_0() { return cExpressionAssignment_2_1_9_0; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_2_1_9_0_0() { return cExpressionXBlockExpressionParserRuleCall_2_1_9_0_0; }

		//expression=RichString
		public Assignment getExpressionAssignment_2_1_9_1() { return cExpressionAssignment_2_1_9_1; }

		//RichString
		public RuleCall getExpressionRichStringParserRuleCall_2_1_9_1_0() { return cExpressionRichStringParserRuleCall_2_1_9_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2_1_9_2() { return cSemicolonKeyword_2_1_9_2; }
	}

	public class CommonModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.CommonModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPackageKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAbstractKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStaticKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDispatchKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFinalKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cStrictfpKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cNativeKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cVolatileKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cSynchronizedKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cTransientKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//// --------------------- FROM Xtend.xtext
		// CommonModifier:
		//	'public' | 'private' | 'protected' | 'package' | 'abstract' | 'static' | 'dispatch' | 'final' | 'strictfp' | 'native'
		//	| 'volatile' | 'synchronized' | 'transient';
		@Override public ParserRule getRule() { return rule; }

		//'public' | 'private' | 'protected' | 'package' | 'abstract' | 'static' | 'dispatch' | 'final' | 'strictfp' | 'native' |
		//'volatile' | 'synchronized' | 'transient'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//'private'
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }

		//'protected'
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//'package'
		public Keyword getPackageKeyword_3() { return cPackageKeyword_3; }

		//'abstract'
		public Keyword getAbstractKeyword_4() { return cAbstractKeyword_4; }

		//'static'
		public Keyword getStaticKeyword_5() { return cStaticKeyword_5; }

		//'dispatch'
		public Keyword getDispatchKeyword_6() { return cDispatchKeyword_6; }

		//'final'
		public Keyword getFinalKeyword_7() { return cFinalKeyword_7; }

		//'strictfp'
		public Keyword getStrictfpKeyword_8() { return cStrictfpKeyword_8; }

		//'native'
		public Keyword getNativeKeyword_9() { return cNativeKeyword_9; }

		//'volatile'
		public Keyword getVolatileKeyword_10() { return cVolatileKeyword_10; }

		//'synchronized'
		public Keyword getSynchronizedKeyword_11() { return cSynchronizedKeyword_11; }

		//'transient'
		public Keyword getTransientKeyword_12() { return cTransientKeyword_12; }
	}

	public class FieldModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.FieldModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FieldModifier:
		//	'val' | 'var';
		@Override public ParserRule getRule() { return rule; }

		//'val' | 'var'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'val'
		public Keyword getValKeyword_0() { return cValKeyword_0; }

		//'var'
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
	}

	public class MethodModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.MethodModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOverrideKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MethodModifier:
		//	'def' | 'override';
		@Override public ParserRule getRule() { return rule; }

		//'def' | 'override'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//'override'
		public Keyword getOverrideKeyword_1() { return cOverrideKeyword_1; }
	}

	public class FunctionIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.FunctionID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperatorsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionID:
		//	ValidID | Operators;
		@Override public ParserRule getRule() { return rule; }

		//ValidID | Operators
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//Operators
		public RuleCall getOperatorsParserRuleCall_1() { return cOperatorsParserRuleCall_1; }
	}

	public class OperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.Operators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpMultiAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOpOrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOpAndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOpEqualityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOpCompareParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOpOtherParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOpMultiParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOpUnaryParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOpPostfixParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Operators:
		//	OpMultiAssign | OpOr | OpAnd | OpEquality | OpCompare | OpOther //  | OpAdd completely contained in OpUnary
		// |
		//	OpMulti | OpUnary | OpPostfix;
		@Override public ParserRule getRule() { return rule; }

		//OpMultiAssign | OpOr | OpAnd | OpEquality | OpCompare | OpOther //  | OpAdd completely contained in OpUnary
		// | OpMulti |
		//OpUnary | OpPostfix
		public Alternatives getAlternatives() { return cAlternatives; }

		//OpMultiAssign
		public RuleCall getOpMultiAssignParserRuleCall_0() { return cOpMultiAssignParserRuleCall_0; }

		//OpOr
		public RuleCall getOpOrParserRuleCall_1() { return cOpOrParserRuleCall_1; }

		//OpAnd
		public RuleCall getOpAndParserRuleCall_2() { return cOpAndParserRuleCall_2; }

		//OpEquality
		public RuleCall getOpEqualityParserRuleCall_3() { return cOpEqualityParserRuleCall_3; }

		//OpCompare
		public RuleCall getOpCompareParserRuleCall_4() { return cOpCompareParserRuleCall_4; }

		//OpOther
		public RuleCall getOpOtherParserRuleCall_5() { return cOpOtherParserRuleCall_5; }

		//OpMulti
		public RuleCall getOpMultiParserRuleCall_6() { return cOpMultiParserRuleCall_6; }

		//OpUnary
		public RuleCall getOpUnaryParserRuleCall_7() { return cOpUnaryParserRuleCall_7; }

		//OpPostfix
		public RuleCall getOpPostfixParserRuleCall_8() { return cOpPostfixParserRuleCall_8; }
	}

	public class TypeReferenceNoTypeArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.TypeReferenceNoTypeArgs");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0.eContents().get(1);
		
		//TypeReferenceNoTypeArgs types::JvmParameterizedTypeReference:
		//	type=[types::JvmType|QualifiedName]
		@Override public ParserRule getRule() { return rule; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0() { return cTypeJvmTypeCrossReference_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExtensionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cExtensionExtensionKeyword_1_0_0 = (Keyword)cExtensionAssignment_1_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		private final Assignment cParameterTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cParameterTypeAssignment_2.eContents().get(0);
		private final Assignment cVarArgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cVarArgFullStopFullStopFullStopKeyword_3_0 = (Keyword)cVarArgAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//Parameter JnarioParameter:
		//	annotations+=XAnnotation* (extension?='extension' annotations+=XAnnotation*)? parameterType=JvmTypeReference
		//	varArg?='...'? name=ValidID
		@Override public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* (extension?='extension' annotations+=XAnnotation*)? parameterType=JvmTypeReference
		//varArg?='...'? name=ValidID
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//(extension?='extension' annotations+=XAnnotation*)?
		public Group getGroup_1() { return cGroup_1; }

		//extension?='extension'
		public Assignment getExtensionAssignment_1_0() { return cExtensionAssignment_1_0; }

		//'extension'
		public Keyword getExtensionExtensionKeyword_1_0_0() { return cExtensionExtensionKeyword_1_0_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_1_0; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_2() { return cParameterTypeAssignment_2; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_2_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_2_0; }

		//varArg?='...'?
		public Assignment getVarArgAssignment_3() { return cVarArgAssignment_3; }

		//'...'
		public Keyword getVarArgFullStopFullStopFullStopKeyword_3_0() { return cVarArgFullStopFullStopFullStopKeyword_3_0; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }
	}

	public class StaticQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.StaticQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// **
		// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
		// * which makes downstream grammars break on classloading, when a rule is removed.
		// * /
		//StaticQualifier:
		//	(ValidID '::')+;
		@Override public ParserRule getRule() { return rule; }

		//(ValidID '::')+
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}
	
	
	private final FeatureFileElements pFeatureFile;
	private final FeatureElements pFeature;
	private final BackgroundElements pBackground;
	private final ScenarioElements pScenario;
	private final MemberElements pMember;
	private final GivenReferenceElements pGivenReference;
	private final GivenElements pGiven;
	private final WhenReferenceElements pWhenReference;
	private final WhenElements pWhen;
	private final ThenReferenceElements pThenReference;
	private final ThenElements pThen;
	private final AndReferenceElements pAndReference;
	private final AndElements pAnd;
	private final ButReferenceElements pButReference;
	private final ButElements pBut;
	private final BlockExpressionElements pBlockExpression;
	private final XPrimaryExpressionElements pXPrimaryExpression;
	private final XRelationalExpressionElements pXRelationalExpression;
	private final ShouldElements pShould;
	private final AssertionElements pAssertion;
	private final AnonymousMemberElements pAnonymousMember;
	private final CommonModifierElements pCommonModifier;
	private final FieldModifierElements pFieldModifier;
	private final MethodModifierElements pMethodModifier;
	private final FunctionIDElements pFunctionID;
	private final OperatorsElements pOperators;
	private final TypeReferenceNoTypeArgsElements pTypeReferenceNoTypeArgs;
	private final ParameterElements pParameter;
	private final TerminalRule tBACKGROUND_TEXT;
	private final TerminalRule tSCENARIO_TEXT;
	private final TerminalRule tFEATURE_TEXT;
	private final TerminalRule tGIVEN_TEXT;
	private final TerminalRule tWHEN_TEXT;
	private final TerminalRule tTHEN_TEXT;
	private final TerminalRule tAND_TEXT;
	private final TerminalRule tBUT_TEXT;
	private final TerminalRule tTEXT;
	private final TerminalRule tSTEP_WITH_ARGS;
	private final TerminalRule tMNL;
	private final TerminalRule tCOLON;
	private final TerminalRule tNL;
	private final TerminalRule tSPACES;
	private final TerminalRule tID;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tUNICODE_ESCAPE;
	private final TerminalRule tSTRING;
	private final TerminalRule tIDENTIFIER_START;
	private final TerminalRule tIDENTIFIER_PART;
	private final TerminalRule tIDENTIFIER_PART_IMPL;
	private final StaticQualifierElements pStaticQualifier;
	
	private final Grammar grammar;

	private final XbaseWithRichstringGrammarAccess gaXbaseWithRichstring;

	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	private final XbaseGrammarAccess gaXbase;

	private final XtypeGrammarAccess gaXtype;

	@Inject
	public FeatureGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithRichstringGrammarAccess gaXbaseWithRichstring,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations,
		XbaseGrammarAccess gaXbase,
		XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithRichstring = gaXbaseWithRichstring;
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pFeatureFile = new FeatureFileElements();
		this.pFeature = new FeatureElements();
		this.pBackground = new BackgroundElements();
		this.pScenario = new ScenarioElements();
		this.pMember = new MemberElements();
		this.pGivenReference = new GivenReferenceElements();
		this.pGiven = new GivenElements();
		this.pWhenReference = new WhenReferenceElements();
		this.pWhen = new WhenElements();
		this.pThenReference = new ThenReferenceElements();
		this.pThen = new ThenElements();
		this.pAndReference = new AndReferenceElements();
		this.pAnd = new AndElements();
		this.pButReference = new ButReferenceElements();
		this.pBut = new ButElements();
		this.pBlockExpression = new BlockExpressionElements();
		this.pXPrimaryExpression = new XPrimaryExpressionElements();
		this.pXRelationalExpression = new XRelationalExpressionElements();
		this.pShould = new ShouldElements();
		this.pAssertion = new AssertionElements();
		this.pAnonymousMember = new AnonymousMemberElements();
		this.pCommonModifier = new CommonModifierElements();
		this.pFieldModifier = new FieldModifierElements();
		this.pMethodModifier = new MethodModifierElements();
		this.pFunctionID = new FunctionIDElements();
		this.pOperators = new OperatorsElements();
		this.pTypeReferenceNoTypeArgs = new TypeReferenceNoTypeArgsElements();
		this.pParameter = new ParameterElements();
		this.tBACKGROUND_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.BACKGROUND_TEXT");
		this.tSCENARIO_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.SCENARIO_TEXT");
		this.tFEATURE_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.FEATURE_TEXT");
		this.tGIVEN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.GIVEN_TEXT");
		this.tWHEN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.WHEN_TEXT");
		this.tTHEN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.THEN_TEXT");
		this.tAND_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.AND_TEXT");
		this.tBUT_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.BUT_TEXT");
		this.tTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.TEXT");
		this.tSTEP_WITH_ARGS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.STEP_WITH_ARGS");
		this.tMNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.MNL");
		this.tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.COLON");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.NL");
		this.tSPACES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.SPACES");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.ID");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.HEX_DIGIT");
		this.tUNICODE_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.UNICODE_ESCAPE");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.STRING");
		this.tIDENTIFIER_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.IDENTIFIER_START");
		this.tIDENTIFIER_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.IDENTIFIER_PART");
		this.tIDENTIFIER_PART_IMPL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jnario.feature.Feature.IDENTIFIER_PART_IMPL");
		this.pStaticQualifier = new StaticQualifierElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.jnario.feature.Feature".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseWithRichstringGrammarAccess getXbaseWithRichstringGrammarAccess() {
		return gaXbaseWithRichstring;
	}

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//FeatureFile JnarioFile:
	//	{FeatureFile} ('package' package=QualifiedName)? importSection=XImportSection? xtendTypes+=Feature?
	public FeatureFileElements getFeatureFileAccess() {
		return pFeatureFile;
	}
	
	public ParserRule getFeatureFileRule() {
		return getFeatureFileAccess().getRule();
	}

	//Feature JnarioClass:
	//	{Feature} annotations+=XAnnotation* name=FEATURE_TEXT description=TEXT? members+=Background? members+=Scenario*
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Background:
	//	{Background} name=BACKGROUND_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And | AndReference |
	//	But | ButReference)*)?;
	public BackgroundElements getBackgroundAccess() {
		return pBackground;
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}

	//Scenario:
	//	{Scenario} name=SCENARIO_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And | AndReference | But
	//	| ButReference)*)? (members+=(When | WhenReference) members+=(And | AndReference | But | ButReference)*)?
	//	(members+=(Then | ThenReference) members+=(And | AndReference | But | ButReference)*)?;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//Member JnarioMember:
	//	{JnarioMember} annotations+=XAnnotation* ({JnarioField.annotationInfo=current} modifiers+=CommonModifier*
	//	(modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID | modifiers+='extension'
	//	(modifiers+=FieldModifier | modifiers+=CommonModifier)* type=JvmTypeReference name=ValidID? |
	//	modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+='extension' modifiers+=CommonModifier*
	//	type=JvmTypeReference name=ValidID? | type=JvmTypeReference name=ValidID) ('=' initialValue=XExpression)? ';'?)
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//GivenReference:
	//	{GivenReference} reference=[Given|GIVEN_TEXT];
	public GivenReferenceElements getGivenReferenceAccess() {
		return pGivenReference;
	}
	
	public ParserRule getGivenReferenceRule() {
		return getGivenReferenceAccess().getRule();
	}

	//Given:
	//	{Given} name=GIVEN_TEXT expression=BlockExpression;
	public GivenElements getGivenAccess() {
		return pGiven;
	}
	
	public ParserRule getGivenRule() {
		return getGivenAccess().getRule();
	}

	//WhenReference:
	//	{WhenReference} reference=[When|WHEN_TEXT];
	public WhenReferenceElements getWhenReferenceAccess() {
		return pWhenReference;
	}
	
	public ParserRule getWhenReferenceRule() {
		return getWhenReferenceAccess().getRule();
	}

	//When:
	//	{When} name=WHEN_TEXT expression=BlockExpression;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}

	//ThenReference:
	//	{ThenReference} reference=[Then|THEN_TEXT];
	public ThenReferenceElements getThenReferenceAccess() {
		return pThenReference;
	}
	
	public ParserRule getThenReferenceRule() {
		return getThenReferenceAccess().getRule();
	}

	//Then:
	//	{Then} name=THEN_TEXT expression=BlockExpression;
	public ThenElements getThenAccess() {
		return pThen;
	}
	
	public ParserRule getThenRule() {
		return getThenAccess().getRule();
	}

	//AndReference:
	//	{AndReference} reference=[And|AND_TEXT];
	public AndReferenceElements getAndReferenceAccess() {
		return pAndReference;
	}
	
	public ParserRule getAndReferenceRule() {
		return getAndReferenceAccess().getRule();
	}

	//And:
	//	{And} name=AND_TEXT expression=BlockExpression;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//ButReference:
	//	{ButReference} reference=[But|BUT_TEXT];
	public ButReferenceElements getButReferenceAccess() {
		return pButReference;
	}
	
	public ParserRule getButReferenceRule() {
		return getButReferenceAccess().getRule();
	}

	//But:
	//	{But} name=BUT_TEXT expression=BlockExpression;
	public ButElements getButAccess() {
		return pBut;
	}
	
	public ParserRule getButRule() {
		return getButAccess().getRule();
	}

	/// *
	// * artificial node to simplify folding
	// * / BlockExpression xbase::XBlockExpression:
	//	(expressions+=XExpressionOrVarDeclaration ';'?)+
	public BlockExpressionElements getBlockExpressionAccess() {
		return pBlockExpression;
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}

	////ExampleTable:
	// //	name=EXAMPLE_TEXT
	// //	columns+=ExampleColumn+ EXAMPLE_ROW_END
	// //	(rows += ExampleRow)*;
	// //
	// //
	//
	////ExampleColumn: 
	// //	(PIPE | PIPE_SPACES) type=JvmTypeReference? name=ValidID ;
	// //
	// //ExampleRow:
	//
	////	((PIPE | PIPE_SPACES) cells+=XExpression)+ EXAMPLE_ROW_END;
	// XPrimaryExpression xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | Assertion
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return pXPrimaryExpression;
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XRelationalExpression xbase::XExpression:
	//	XOtherOperatorExpression (=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should])
	//	rightOperand=XOtherOperatorExpression | => ({ShouldThrow.expression=current} ('should' 'throw' | 'throws'))
	//	type=JvmTypeReference | => ({xbase::XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XRelationalExpressionElements getXRelationalExpressionAccess() {
		return pXRelationalExpression;
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//Should:
	//	'should' 'not'? ID;
	public ShouldElements getShouldAccess() {
		return pShould;
	}
	
	public ParserRule getShouldRule() {
		return getShouldAccess().getRule();
	}

	//Assertion:
	//	{Assertion} 'assert' expression=XExpression;
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//AnonymousMember JnarioMember:
	//	{JnarioMember} annotations+=XAnnotation* ({JnarioField.annotationInfo=current} modifiers+=CommonModifier*
	//	(modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID | modifiers+='extension'
	//	(modifiers+=FieldModifier | modifiers+=CommonModifier)* type=JvmTypeReference name=ValidID? |
	//	modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+='extension' modifiers+=CommonModifier*
	//	type=JvmTypeReference name=ValidID? | type=JvmTypeReference name=ValidID) ('=' initialValue=XExpression)? ';'? |
	//	{JnarioFunction.annotationInfo=current} modifiers+=CommonModifier* modifiers+=MethodModifier
	//	(modifiers+=CommonModifier | modifiers+=MethodModifier)* ('<' typeParameters+=JvmTypeParameter (','
	//	typeParameters+=JvmTypeParameter)* '>')? (=> (returnType=JvmTypeReference name=FunctionID '(') | =>
	//	(returnType=TypeReferenceNoTypeArgs name=FunctionID '(') | name=FunctionID '(') (parameters+=Parameter (','
	//	parameters+=Parameter)*)? ')' ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
	//	(expression=XBlockExpression | expression=RichString | ';')?)
	public AnonymousMemberElements getAnonymousMemberAccess() {
		return pAnonymousMember;
	}
	
	public ParserRule getAnonymousMemberRule() {
		return getAnonymousMemberAccess().getRule();
	}

	//// --------------------- FROM Xtend.xtext
	// CommonModifier:
	//	'public' | 'private' | 'protected' | 'package' | 'abstract' | 'static' | 'dispatch' | 'final' | 'strictfp' | 'native'
	//	| 'volatile' | 'synchronized' | 'transient';
	public CommonModifierElements getCommonModifierAccess() {
		return pCommonModifier;
	}
	
	public ParserRule getCommonModifierRule() {
		return getCommonModifierAccess().getRule();
	}

	//FieldModifier:
	//	'val' | 'var';
	public FieldModifierElements getFieldModifierAccess() {
		return pFieldModifier;
	}
	
	public ParserRule getFieldModifierRule() {
		return getFieldModifierAccess().getRule();
	}

	//MethodModifier:
	//	'def' | 'override';
	public MethodModifierElements getMethodModifierAccess() {
		return pMethodModifier;
	}
	
	public ParserRule getMethodModifierRule() {
		return getMethodModifierAccess().getRule();
	}

	//FunctionID:
	//	ValidID | Operators;
	public FunctionIDElements getFunctionIDAccess() {
		return pFunctionID;
	}
	
	public ParserRule getFunctionIDRule() {
		return getFunctionIDAccess().getRule();
	}

	//Operators:
	//	OpMultiAssign | OpOr | OpAnd | OpEquality | OpCompare | OpOther //  | OpAdd completely contained in OpUnary
	// |
	//	OpMulti | OpUnary | OpPostfix;
	public OperatorsElements getOperatorsAccess() {
		return pOperators;
	}
	
	public ParserRule getOperatorsRule() {
		return getOperatorsAccess().getRule();
	}

	//TypeReferenceNoTypeArgs types::JvmParameterizedTypeReference:
	//	type=[types::JvmType|QualifiedName]
	public TypeReferenceNoTypeArgsElements getTypeReferenceNoTypeArgsAccess() {
		return pTypeReferenceNoTypeArgs;
	}
	
	public ParserRule getTypeReferenceNoTypeArgsRule() {
		return getTypeReferenceNoTypeArgsAccess().getRule();
	}

	//Parameter JnarioParameter:
	//	annotations+=XAnnotation* (extension?='extension' annotations+=XAnnotation*)? parameterType=JvmTypeReference
	//	varArg?='...'? name=ValidID
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//terminal BACKGROUND_TEXT:
	//	"Background:" MNL;
	public TerminalRule getBACKGROUND_TEXTRule() {
		return tBACKGROUND_TEXT;
	} 

	//terminal SCENARIO_TEXT:
	//	"Scenario:" MNL;
	public TerminalRule getSCENARIO_TEXTRule() {
		return tSCENARIO_TEXT;
	} 

	//terminal FEATURE_TEXT:
	//	"Feature" COLON->(BACKGROUND_TEXT | SCENARIO_TEXT);
	public TerminalRule getFEATURE_TEXTRule() {
		return tFEATURE_TEXT;
	} 

	//terminal GIVEN_TEXT:
	//	'Given ' STEP_WITH_ARGS;
	public TerminalRule getGIVEN_TEXTRule() {
		return tGIVEN_TEXT;
	} 

	//terminal WHEN_TEXT:
	//	'When ' STEP_WITH_ARGS;
	public TerminalRule getWHEN_TEXTRule() {
		return tWHEN_TEXT;
	} 

	//terminal THEN_TEXT:
	//	'Then ' STEP_WITH_ARGS;
	public TerminalRule getTHEN_TEXTRule() {
		return tTHEN_TEXT;
	} 

	//terminal AND_TEXT:
	//	'And ' STEP_WITH_ARGS;
	public TerminalRule getAND_TEXTRule() {
		return tAND_TEXT;
	} 

	//terminal BUT_TEXT:
	//	'But ' STEP_WITH_ARGS;
	public TerminalRule getBUT_TEXTRule() {
		return tBUT_TEXT;
	} 

	//terminal TEXT:
	//	'____dummy____'+;
	public TerminalRule getTEXTRule() {
		return tTEXT;
	} 

	//terminal fragment STEP_WITH_ARGS:
	//	!('\r' | '\n')* '\r'? ('\n' SPACES RICH_TEXT? SPACES | EOF);
	public TerminalRule getSTEP_WITH_ARGSRule() {
		return tSTEP_WITH_ARGS;
	} 

	//terminal fragment MNL:
	//	!('\r' | '\n')* NL;
	public TerminalRule getMNLRule() {
		return tMNL;
	} 

	//terminal fragment COLON:
	//	SPACES ':';
	public TerminalRule getCOLONRule() {
		return tCOLON;
	} 

	//terminal fragment NL:
	//	'\r'? '\n'?;
	public TerminalRule getNLRule() {
		return tNL;
	} 

	//terminal fragment SPACES:
	//	' ' | '\t'*;
	public TerminalRule getSPACESRule() {
		return tSPACES;
	} 

	//terminal ID:
	//	'^'? (IDENTIFIER_START | UNICODE_ESCAPE) (IDENTIFIER_PART | UNICODE_ESCAPE)*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal fragment HEX_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	} 

	//terminal fragment UNICODE_ESCAPE:
	//	'\\' 'u' (HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?)?;
	public TerminalRule getUNICODE_ESCAPERule() {
		return tUNICODE_ESCAPE;
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal fragment IDENTIFIER_START:
	//	'\\u0024' | '\\u0041'..'\\u005A' | '\\u005F' | '\\u0061'..'\\u007A' | '\\u00A2'..'\\u00A5' | '\\u00AA' | '\\u00B5' | '\\u00BA' |
	//	'\\u00C0'..'\\u00D6' | '\\u00D8'..'\\u00F6' | '\\u00F8'..'\\u0236' | '\\u0250'..'\\u02C1' | '\\u02C6'..'\\u02D1' |
	//	'\\u02E0'..'\\u02E4' | '\\u02EE' | '\\u037A' | '\\u0386' | '\\u0388'..'\\u038A' | '\\u038C' | '\\u038E'..'\\u03A1' |
	//	'\\u03A3'..'\\u03CE' | '\\u03D0'..'\\u03F5' | '\\u03F7'..'\\u03FB' | '\\u0400'..'\\u0481' | '\\u048A'..'\\u04CE' |
	//	'\\u04D0'..'\\u04F5' | '\\u04F8'..'\\u04F9' | '\\u0500'..'\\u050F' | '\\u0531'..'\\u0556' | '\\u0559' | '\\u0561'..'\\u0587' |
	//	'\\u05D0'..'\\u05EA' | '\\u05F0'..'\\u05F2' | '\\u0621'..'\\u063A' | '\\u0640'..'\\u064A' | '\\u066E'..'\\u066F' |
	//	'\\u0671'..'\\u06D3' | '\\u06D5' | '\\u06E5'..'\\u06E6' | '\\u06EE'..'\\u06EF' | '\\u06FA'..'\\u06FC' | '\\u06FF' | '\\u0710' |
	//	'\\u0712'..'\\u072F' | '\\u074D'..'\\u074F' | '\\u0780'..'\\u07A5' | '\\u07B1' | '\\u0904'..'\\u0939' | '\\u093D' | '\\u0950' |
	//	'\\u0958'..'\\u0961' | '\\u0985'..'\\u098C' | '\\u098F'..'\\u0990' | '\\u0993'..'\\u09A8' | '\\u09AA'..'\\u09B0' | '\\u09B2' |
	//	'\\u09B6'..'\\u09B9' | '\\u09BD' | '\\u09DC'..'\\u09DD' | '\\u09DF'..'\\u09E1' | '\\u09F0'..'\\u09F3' | '\\u0A05'..'\\u0A0A' |
	//	'\\u0A0F'..'\\u0A10' | '\\u0A13'..'\\u0A28' | '\\u0A2A'..'\\u0A30' | '\\u0A32'..'\\u0A33' | '\\u0A35'..'\\u0A36' |
	//	'\\u0A38'..'\\u0A39' | '\\u0A59'..'\\u0A5C' | '\\u0A5E' | '\\u0A72'..'\\u0A74' | '\\u0A85'..'\\u0A8D' | '\\u0A8F'..'\\u0A91' |
	//	'\\u0A93'..'\\u0AA8' | '\\u0AAA'..'\\u0AB0' | '\\u0AB2'..'\\u0AB3' | '\\u0AB5'..'\\u0AB9' | '\\u0ABD' | '\\u0AD0' |
	//	'\\u0AE0'..'\\u0AE1' | '\\u0AF1' | '\\u0B05'..'\\u0B0C' | '\\u0B0F'..'\\u0B10' | '\\u0B13'..'\\u0B28' | '\\u0B2A'..'\\u0B30' |
	//	'\\u0B32'..'\\u0B33' | '\\u0B35'..'\\u0B39' | '\\u0B3D' | '\\u0B5C'..'\\u0B5D' | '\\u0B5F'..'\\u0B61' | '\\u0B71' | '\\u0B83' |
	//	'\\u0B85'..'\\u0B8A' | '\\u0B8E'..'\\u0B90' | '\\u0B92'..'\\u0B95' | '\\u0B99'..'\\u0B9A' | '\\u0B9C' | '\\u0B9E'..'\\u0B9F' |
	//	'\\u0BA3'..'\\u0BA4' | '\\u0BA8'..'\\u0BAA' | '\\u0BAE'..'\\u0BB5' | '\\u0BB7'..'\\u0BB9' | '\\u0BF9' | '\\u0C05'..'\\u0C0C' |
	//	'\\u0C0E'..'\\u0C10' | '\\u0C12'..'\\u0C28' | '\\u0C2A'..'\\u0C33' | '\\u0C35'..'\\u0C39' | '\\u0C60'..'\\u0C61' |
	//	'\\u0C85'..'\\u0C8C' | '\\u0C8E'..'\\u0C90' | '\\u0C92'..'\\u0CA8' | '\\u0CAA'..'\\u0CB3' | '\\u0CB5'..'\\u0CB9' | '\\u0CBD' |
	//	'\\u0CDE' | '\\u0CE0'..'\\u0CE1' | '\\u0D05'..'\\u0D0C' | '\\u0D0E'..'\\u0D10' | '\\u0D12'..'\\u0D28' | '\\u0D2A'..'\\u0D39' |
	//	'\\u0D60'..'\\u0D61' | '\\u0D85'..'\\u0D96' | '\\u0D9A'..'\\u0DB1' | '\\u0DB3'..'\\u0DBB' | '\\u0DBD' | '\\u0DC0'..'\\u0DC6' |
	//	'\\u0E01'..'\\u0E30' | '\\u0E32'..'\\u0E33' | '\\u0E3F'..'\\u0E46' | '\\u0E81'..'\\u0E82' | '\\u0E84' | '\\u0E87'..'\\u0E88' |
	//	'\\u0E8A' | '\\u0E8D' | '\\u0E94'..'\\u0E97' | '\\u0E99'..'\\u0E9F' | '\\u0EA1'..'\\u0EA3' | '\\u0EA5' | '\\u0EA7' |
	//	'\\u0EAA'..'\\u0EAB' | '\\u0EAD'..'\\u0EB0' | '\\u0EB2'..'\\u0EB3' | '\\u0EBD' | '\\u0EC0'..'\\u0EC4' | '\\u0EC6' |
	//	'\\u0EDC'..'\\u0EDD' | '\\u0F00' | '\\u0F40'..'\\u0F47' | '\\u0F49'..'\\u0F6A' | '\\u0F88'..'\\u0F8B' | '\\u1000'..'\\u1021' |
	//	'\\u1023'..'\\u1027' | '\\u1029'..'\\u102A' | '\\u1050'..'\\u1055' | '\\u10A0'..'\\u10C5' | '\\u10D0'..'\\u10F8' |
	//	'\\u1100'..'\\u1159' | '\\u115F'..'\\u11A2' | '\\u11A8'..'\\u11F9' | '\\u1200'..'\\u1206' | '\\u1208'..'\\u1246' | '\\u1248' |
	//	'\\u124A'..'\\u124D' | '\\u1250'..'\\u1256' | '\\u1258' | '\\u125A'..'\\u125D' | '\\u1260'..'\\u1286' | '\\u1288' |
	//	'\\u128A'..'\\u128D' | '\\u1290'..'\\u12AE' | '\\u12B0' | '\\u12B2'..'\\u12B5' | '\\u12B8'..'\\u12BE' | '\\u12C0' |
	//	'\\u12C2'..'\\u12C5' | '\\u12C8'..'\\u12CE' | '\\u12D0'..'\\u12D6' | '\\u12D8'..'\\u12EE' | '\\u12F0'..'\\u130E' | '\\u1310' |
	//	'\\u1312'..'\\u1315' | '\\u1318'..'\\u131E' | '\\u1320'..'\\u1346' | '\\u1348'..'\\u135A' | '\\u13A0'..'\\u13F4' |
	//	'\\u1401'..'\\u166C' | '\\u166F'..'\\u1676' | '\\u1681'..'\\u169A' | '\\u16A0'..'\\u16EA' | '\\u16EE'..'\\u16F0' |
	//	'\\u1700'..'\\u170C' | '\\u170E'..'\\u1711' | '\\u1720'..'\\u1731' | '\\u1740'..'\\u1751' | '\\u1760'..'\\u176C' |
	//	'\\u176E'..'\\u1770' | '\\u1780'..'\\u17B3' | '\\u17D7' | '\\u17DB'..'\\u17DC' | '\\u1820'..'\\u1877' | '\\u1880'..'\\u18A8' |
	//	'\\u1900'..'\\u191C' | '\\u1950'..'\\u196D' | '\\u1970'..'\\u1974' | '\\u1D00'..'\\u1D6B' | '\\u1E00'..'\\u1E9B' |
	//	'\\u1EA0'..'\\u1EF9' | '\\u1F00'..'\\u1F15' | '\\u1F18'..'\\u1F1D' | '\\u1F20'..'\\u1F45' | '\\u1F48'..'\\u1F4D' |
	//	'\\u1F50'..'\\u1F57' | '\\u1F59' | '\\u1F5B' | '\\u1F5D' | '\\u1F5F'..'\\u1F7D' | '\\u1F80'..'\\u1FB4' | '\\u1FB6'..'\\u1FBC' |
	//	'\\u1FBE' | '\\u1FC2'..'\\u1FC4' | '\\u1FC6'..'\\u1FCC' | '\\u1FD0'..'\\u1FD3' | '\\u1FD6'..'\\u1FDB' | '\\u1FE0'..'\\u1FEC' |
	//	'\\u1FF2'..'\\u1FF4' | '\\u1FF6'..'\\u1FFC' | '\\u203F'..'\\u2040' | '\\u2054' | '\\u2071' | '\\u207F' | '\\u20A0'..'\\u20B1' |
	//	'\\u2102' | '\\u2107' | '\\u210A'..'\\u2113' | '\\u2115' | '\\u2119'..'\\u211D' | '\\u2124' | '\\u2126' | '\\u2128' |
	//	'\\u212A'..'\\u212D' | '\\u212F'..'\\u2131' | '\\u2133'..'\\u2139' | '\\u213D'..'\\u213F' | '\\u2145'..'\\u2149' |
	//	'\\u2160'..'\\u2183' | '\\u3005'..'\\u3007' | '\\u3021'..'\\u3029' | '\\u3031'..'\\u3035' | '\\u3038'..'\\u303C' |
	//	'\\u3041'..'\\u3096' | '\\u309D'..'\\u309F' | '\\u30A1'..'\\u30FF' | '\\u3105'..'\\u312C' | '\\u3131'..'\\u318E' |
	//	'\\u31A0'..'\\u31B7' | '\\u31F0'..'\\u31FF' | '\\u3400'..'\\u4DB5' | '\\u4E00'..'\\u9FA5' | '\\uA000'..'\\uA48C' |
	//	'\\uAC00'..'\\uD7A3' | '\\uF900'..'\\uFA2D' | '\\uFA30'..'\\uFA6A' | '\\uFB00'..'\\uFB06' | '\\uFB13'..'\\uFB17' | '\\uFB1D' |
	//	'\\uFB1F'..'\\uFB28' | '\\uFB2A'..'\\uFB36' | '\\uFB38'..'\\uFB3C' | '\\uFB3E' | '\\uFB40'..'\\uFB41' | '\\uFB43'..'\\uFB44' |
	//	'\\uFB46'..'\\uFBB1' | '\\uFBD3'..'\\uFD3D' | '\\uFD50'..'\\uFD8F' | '\\uFD92'..'\\uFDC7' | '\\uFDF0'..'\\uFDFC' |
	//	'\\uFE33'..'\\uFE34' | '\\uFE4D'..'\\uFE4F' | '\\uFE69' | '\\uFE70'..'\\uFE74' | '\\uFE76'..'\\uFEFC' | '\\uFF04' |
	//	'\\uFF21'..'\\uFF3A' | '\\uFF3F' | '\\uFF41'..'\\uFF5A' | '\\uFF65'..'\\uFFBE' | '\\uFFC2'..'\\uFFC7' | '\\uFFCA'..'\\uFFCF' |
	//	'\\uFFD2'..'\\uFFD7' | '\\uFFDA'..'\\uFFDC' | '\\uFFE0'..'\\uFFE1' | '\\uFFE5'..'\\uFFE6';
	public TerminalRule getIDENTIFIER_STARTRule() {
		return tIDENTIFIER_START;
	} 

	//terminal fragment IDENTIFIER_PART:
	//	IDENTIFIER_START | IDENTIFIER_PART_IMPL;
	public TerminalRule getIDENTIFIER_PARTRule() {
		return tIDENTIFIER_PART;
	} 

	//terminal fragment IDENTIFIER_PART_IMPL:
	//	'\\u0000'..'\\u0008' | '\\u000E'..'\\u001B' | '\\u0030'..'\\u0039' | '\\u007F'..'\\u009F' | '\\u00AD' | '\\u0300'..'\\u0357' |
	//	'\\u035D'..'\\u036F' | '\\u0483'..'\\u0486' | '\\u0591'..'\\u05A1' | '\\u05A3'..'\\u05B9' | '\\u05BB'..'\\u05BD' | '\\u05BF' |
	//	'\\u05C1'..'\\u05C2' | '\\u05C4' | '\\u0600'..'\\u0603' | '\\u0610'..'\\u0615' | '\\u064B'..'\\u0658' | '\\u0660'..'\\u0669' |
	//	'\\u0670' | '\\u06D6'..'\\u06DD' | '\\u06DF'..'\\u06E4' | '\\u06E7'..'\\u06E8' | '\\u06EA'..'\\u06ED' | '\\u06F0'..'\\u06F9' |
	//	'\\u070F' | '\\u0711' | '\\u0730'..'\\u074A' | '\\u07A6'..'\\u07B0' | '\\u0901'..'\\u0903' | '\\u093C' | '\\u093E'..'\\u094D' |
	//	'\\u0951'..'\\u0954' | '\\u0962'..'\\u0963' | '\\u0966'..'\\u096F' | '\\u0981'..'\\u0983' | '\\u09BC' | '\\u09BE'..'\\u09C4' |
	//	'\\u09C7'..'\\u09C8' | '\\u09CB'..'\\u09CD' | '\\u09D7' | '\\u09E2'..'\\u09E3' | '\\u09E6'..'\\u09EF' | '\\u0A01'..'\\u0A03' |
	//	'\\u0A3C' | '\\u0A3E'..'\\u0A42' | '\\u0A47'..'\\u0A48' | '\\u0A4B'..'\\u0A4D' | '\\u0A66'..'\\u0A71' | '\\u0A81'..'\\u0A83' |
	//	'\\u0ABC' | '\\u0ABE'..'\\u0AC5' | '\\u0AC7'..'\\u0AC9' | '\\u0ACB'..'\\u0ACD' | '\\u0AE2'..'\\u0AE3' | '\\u0AE6'..'\\u0AEF' |
	//	'\\u0B01'..'\\u0B03' | '\\u0B3C' | '\\u0B3E'..'\\u0B43' | '\\u0B47'..'\\u0B48' | '\\u0B4B'..'\\u0B4D' | '\\u0B56'..'\\u0B57' |
	//	'\\u0B66'..'\\u0B6F' | '\\u0B82' | '\\u0BBE'..'\\u0BC2' | '\\u0BC6'..'\\u0BC8' | '\\u0BCA'..'\\u0BCD' | '\\u0BD7' |
	//	'\\u0BE7'..'\\u0BEF' | '\\u0C01'..'\\u0C03' | '\\u0C3E'..'\\u0C44' | '\\u0C46'..'\\u0C48' | '\\u0C4A'..'\\u0C4D' |
	//	'\\u0C55'..'\\u0C56' | '\\u0C66'..'\\u0C6F' | '\\u0C82'..'\\u0C83' | '\\u0CBC' | '\\u0CBE'..'\\u0CC4' | '\\u0CC6'..'\\u0CC8' |
	//	'\\u0CCA'..'\\u0CCD' | '\\u0CD5'..'\\u0CD6' | '\\u0CE6'..'\\u0CEF' | '\\u0D02'..'\\u0D03' | '\\u0D3E'..'\\u0D43' |
	//	'\\u0D46'..'\\u0D48' | '\\u0D4A'..'\\u0D4D' | '\\u0D57' | '\\u0D66'..'\\u0D6F' | '\\u0D82'..'\\u0D83' | '\\u0DCA' |
	//	'\\u0DCF'..'\\u0DD4' | '\\u0DD6' | '\\u0DD8'..'\\u0DDF' | '\\u0DF2'..'\\u0DF3' | '\\u0E31' | '\\u0E34'..'\\u0E3A' |
	//	'\\u0E47'..'\\u0E4E' | '\\u0E50'..'\\u0E59' | '\\u0EB1' | '\\u0EB4'..'\\u0EB9' | '\\u0EBB'..'\\u0EBC' | '\\u0EC8'..'\\u0ECD' |
	//	'\\u0ED0'..'\\u0ED9' | '\\u0F18'..'\\u0F19' | '\\u0F20'..'\\u0F29' | '\\u0F35' | '\\u0F37' | '\\u0F39' | '\\u0F3E'..'\\u0F3F' |
	//	'\\u0F71'..'\\u0F84' | '\\u0F86'..'\\u0F87' | '\\u0F90'..'\\u0F97' | '\\u0F99'..'\\u0FBC' | '\\u0FC6' | '\\u102C'..'\\u1032' |
	//	'\\u1036'..'\\u1039' | '\\u1040'..'\\u1049' | '\\u1056'..'\\u1059' | '\\u1369'..'\\u1371' | '\\u1712'..'\\u1714' |
	//	'\\u1732'..'\\u1734' | '\\u1752'..'\\u1753' | '\\u1772'..'\\u1773' | '\\u17B4'..'\\u17D3' | '\\u17DD' | '\\u17E0'..'\\u17E9' |
	//	'\\u180B'..'\\u180D' | '\\u1810'..'\\u1819' | '\\u18A9' | '\\u1920'..'\\u192B' | '\\u1930'..'\\u193B' | '\\u1946'..'\\u194F' |
	//	'\\u200C'..'\\u200F' | '\\u202A'..'\\u202E' | '\\u2060'..'\\u2063' | '\\u206A'..'\\u206F' | '\\u20D0'..'\\u20DC' | '\\u20E1' |
	//	'\\u20E5'..'\\u20EA' | '\\u302A'..'\\u302F' | '\\u3099'..'\\u309A' | '\\uFB1E' | '\\uFE00'..'\\uFE0F' | '\\uFE20'..'\\uFE23' |
	//	'\\uFEFF' | '\\uFF10'..'\\uFF19' | '\\uFFF9'..'\\uFFFB';
	public TerminalRule getIDENTIFIER_PART_IMPLRule() {
		return tIDENTIFIER_PART_IMPL;
	} 

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID '::')+;
	public StaticQualifierElements getStaticQualifierAccess() {
		return pStaticQualifier;
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	////From Xtend.xtext
	//XStringLiteral xbase::XExpression:
	//	SimpleStringLiteral | RichString
	public XbaseWithRichstringGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbaseWithRichstring.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//SimpleStringLiteral xbase::XExpression:
	//	{xbase::XStringLiteral} value=super::STRING
	public XbaseWithRichstringGrammarAccess.SimpleStringLiteralElements getSimpleStringLiteralAccess() {
		return gaXbaseWithRichstring.getSimpleStringLiteralAccess();
	}
	
	public ParserRule getSimpleStringLiteralRule() {
		return getSimpleStringLiteralAccess().getRule();
	}

	//RichString xbase::XExpression:
	//	{RichString} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart expressions+=RichStringPart?
	//	(expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)*
	//	expressions+=RichStringLiteralEnd)
	public XbaseWithRichstringGrammarAccess.RichStringElements getRichStringAccess() {
		return gaXbaseWithRichstring.getRichStringAccess();
	}
	
	public ParserRule getRichStringRule() {
		return getRichStringAccess().getRule();
	}

	//RichStringLiteral xbase::XExpression:
	//	{RichStringLiteral} value=RICH_TEXT
	public XbaseWithRichstringGrammarAccess.RichStringLiteralElements getRichStringLiteralAccess() {
		return gaXbaseWithRichstring.getRichStringLiteralAccess();
	}
	
	public ParserRule getRichStringLiteralRule() {
		return getRichStringLiteralAccess().getRule();
	}

	//RichStringLiteralStart xbase::XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_START
	public XbaseWithRichstringGrammarAccess.RichStringLiteralStartElements getRichStringLiteralStartAccess() {
		return gaXbaseWithRichstring.getRichStringLiteralStartAccess();
	}
	
	public ParserRule getRichStringLiteralStartRule() {
		return getRichStringLiteralStartAccess().getRule();
	}

	//RichStringLiteralInbetween xbase::XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_INBETWEEN
	public XbaseWithRichstringGrammarAccess.RichStringLiteralInbetweenElements getRichStringLiteralInbetweenAccess() {
		return gaXbaseWithRichstring.getRichStringLiteralInbetweenAccess();
	}
	
	public ParserRule getRichStringLiteralInbetweenRule() {
		return getRichStringLiteralInbetweenAccess().getRule();
	}

	//RichStringLiteralEnd xbase::XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_END
	public XbaseWithRichstringGrammarAccess.RichStringLiteralEndElements getRichStringLiteralEndAccess() {
		return gaXbaseWithRichstring.getRichStringLiteralEndAccess();
	}
	
	public ParserRule getRichStringLiteralEndRule() {
		return getRichStringLiteralEndAccess().getRule();
	}

	//InternalRichString xbase::XExpression:
	//	{RichString} (expressions+=RichStringLiteralInbetween (expressions+=RichStringPart?
	//	expressions+=RichStringLiteralInbetween)*)
	public XbaseWithRichstringGrammarAccess.InternalRichStringElements getInternalRichStringAccess() {
		return gaXbaseWithRichstring.getInternalRichStringAccess();
	}
	
	public ParserRule getInternalRichStringRule() {
		return getInternalRichStringAccess().getRule();
	}

	//RichStringPart xbase::XExpression:
	//	XExpressionOrVarDeclaration
	public XbaseWithRichstringGrammarAccess.RichStringPartElements getRichStringPartAccess() {
		return gaXbaseWithRichstring.getRichStringPartAccess();
	}
	
	public ParserRule getRichStringPartRule() {
		return getRichStringPartAccess().getRule();
	}

	//terminal RICH_TEXT:
	//	"'''" IN_RICH_STRING* ("'''" | ("'" "'"?)? EOF);
	public TerminalRule getRICH_TEXTRule() {
		return gaXbaseWithRichstring.getRICH_TEXTRule();
	} 

	//terminal RICH_TEXT_START:
	//	"'''" IN_RICH_STRING* ("'" "'"?)? '«';
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaXbaseWithRichstring.getRICH_TEXT_STARTRule();
	} 

	//terminal RICH_TEXT_END:
	//	'»' IN_RICH_STRING* ("'''" | ("'" "'"?)? EOF);
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaXbaseWithRichstring.getRICH_TEXT_ENDRule();
	} 

	//terminal RICH_TEXT_INBETWEEN:
	//	'»' IN_RICH_STRING* ("'" "'"?)? '«';
	public TerminalRule getRICH_TEXT_INBETWEENRule() {
		return gaXbaseWithRichstring.getRICH_TEXT_INBETWEENRule();
	} 

	//terminal fragment IN_RICH_STRING:
	//	"''" !('«' | "'") | "'" !('«' | "'") | !('«' | "'");
	public TerminalRule getIN_RICH_STRINGRule() {
		return gaXbaseWithRichstring.getIN_RICH_STRINGRule();
	} 

	//XAnnotation:
	//	{XAnnotation} '@' annotationType=[types::JvmAnnotationType|QualifiedName] (=> '('
	//	(elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ')')?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueOrCommaList xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}

	//XAnnotationElementValue xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationOrExpression xbase::XExpression:
	//	XAnnotation | XExpression
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression XExpression:
	//	super::XRelationalExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpEquality]) rightOperand=super::XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall XExpression:
	//	super::XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | super::XStringLiteral |
	//	XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	super::ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
